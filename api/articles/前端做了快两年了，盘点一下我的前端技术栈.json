{"title":"前端做了快两年了，盘点一下我的前端技术栈","uid":"593191d2ee5e83bc4ca2a8a8cae1a811","slug":"前端做了快两年了，盘点一下我的前端技术栈","date":"2024-02-12T03:24:42.000Z","updated":"2024-02-12T03:30:08.761Z","comments":true,"path":"api/articles/前端做了快两年了，盘点一下我的前端技术栈.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c9907a9f345e8d03387d40.jpg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前言很简单，年终了，自己写了快两年前端（虽然刚毕业），但是大致总结一下哈哈哈哈</p>\n<p>我觉得这个话题蛮有意思的，可以看看大家的技术广度，可以进行分享和学习以及讨论</p>\n<p>所以这里说一下我对我的前端技术，做一下盘点和总结</p>\n<p>因为我的开发年限有限，所以我觉得我的盘点更适合<code>0-3</code>年的前端人群，所以技术范畴没有高年限大佬那么广，请见谅~</p>\n<h1 id=\"个人技术栈\"><a href=\"#个人技术栈\" class=\"headerlink\" title=\"个人技术栈\"></a>个人技术栈</h1><p>我对我的较为熟悉的、主要的<code>前端技术栈</code>做个介绍，然后分段进行一下总结</p>\n<p><code>Vue、TS、小程序、UniAPP、ThreeJS、Node后端、鸿蒙（目前我先放在前端这里，如果你说归属于移动端，那也没问题）</code></p>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><p>在国内<code>Vue</code>和<code>React</code>的争论一直存在，但是我觉得并无优劣之分，都是很优秀很好的框架，与原生相比，二者都方便了我的开发</p>\n<p>并且二者的生态也很好，有很多周边的库，以及衍生的上层框架</p>\n<p>我觉得讨论好坏是意义不大的，如果你觉得不好的话，可以不去使用自己不心仪的框架，并且大可以去自己做一个更好的开源框架，或者是哪里让你觉得不舒服了，大可以提个<code>PR</code></p>\n<p>我觉得讨论这个意义真的不大，但是我们可以去讨论一下框架的实际作用，在我们工作或者开发层面有没有帮助</p>\n<p>在<code>国内</code>，Vue的使用范围是不用多说的，不管它是不是培训机构或者是什么别的原因普及的，但是在国内，Vue足够熟练的话，大概率是能有个工作的（当然，并不完全，毕竟环境如此严峻）</p>\n<p>在<code>国外</code>的话，Vue也有不少，但是远不及国内这么普遍，这是一个不争的事实，所以如果你真的想去国外，或者是找<code>远程</code>的话，学<code>React</code>我觉得是比较有必要的，当然，这只是个建议</p>\n<p>而且就是在国内，要求<code>React</code>和<code>Vue</code>都会的的好像也慢慢变多了</p>\n<p>所以我真的觉得，这已经不是需不需要学的了，好像二者都要会似乎是必须技能了？但是也不用太担心，不考虑源码层面，其实上手另一框架进行开发是很快的~</p>\n<h3 id=\"Nuxt\"><a href=\"#Nuxt\" class=\"headerlink\" title=\"Nuxt\"></a>Nuxt</h3><p>关于<code>Nuxt</code>，大家都知道它是<code>Vue</code>的一个上层框架，处理<code>SSR</code>问题的，目前是<code>Nuxt3</code>的版本</p>\n<p>首先，我没什么资格讨论这个框架的优劣</p>\n<p>我说一下我的开发体验，<code>约定大于配置</code>的原则贯穿了这个框架，但是也因此有一定的学习成本，而且在国内大部分的公司，好像没用上<code>Nuxt</code>，至少在招聘要求上，<code>Nuxt</code>好像不怎么提，但是在一些大厂我是知道在用SSR的，之前我在某厂的时候用的<code>Next</code></p>\n<p>我并不清楚大家在公司是否业务上会用到这个框架，但是我之前在国企给公司做官网的时候，提出用<code>Nuxt</code>做，被无情否决了，原因有几方面吧</p>\n<p>这是我当时的开发任务表</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c9882a9f345e8d0323ef9b.jpg\"></p>\n<ul>\n<li>成本问题，公司人员为了这官网需要学习一个新的框架吗，而且资源并不多，稳定性谁也无法保证</li>\n<li>真的需要这个<code>SSR</code>吗</li>\n<li><code>Nuxt全栈</code>对于一个技术主管是<code>Java</code>出身的人，毫无优势</li>\n</ul>\n<p>后来我从公司离职了，现在我也不知道用了什么技术栈做的官网，不排除<code>JSP</code>的可能性，这里大家会说<code>JSP</code>远古时代的东西了，但是技术主管也是从那个时代过来的，而且<code>JSP</code>在<code>服务端渲染</code>上还是鼻祖级别</p>\n<p>那么<code>Nuxt</code>好吗？我觉得对学<code>Vue</code>的人来说，真的是个不错的框架，当然除了<code>SSR</code>，你做官网也可以有<code>SSG</code>的选择，但是<code>Nuxt</code>作为一个框架来说更为完善，我觉得目前更适合个人网站层面的开发</p>\n<p>可惜的是，我在<code>Github</code>浏览的时候，Nuxt好的项目比较少，尤其是<code>Nuxt3</code>的项目，当然，这是在上半年的时候了，而且目前市面上<code>Nuxt</code>教程也不足，为学习带来一些不小的挑战</p>\n<p>同时Next的资源会更多一些</p>\n<p>总的来说，我觉得SSR框架是很好的趋势，也很有学习的必要~</p>\n<h2 id=\"TS\"><a href=\"#TS\" class=\"headerlink\" title=\"TS\"></a>TS</h2><p>今年骂<code>TS</code>的人格外多，什么什么取代<code>TS</code>的文章都很火，遗憾的是，我还并没有去使用<code>JSDoc</code>,我无法进行比较层面上的讨论，所以我只能说一些我关于<code>TS</code>的看法</p>\n<p>我个人觉得，你可以把<code>JS</code>和<code>TS</code>看成是两门语言</p>\n<p>在<code>封装</code>层面，我觉得TS对我的帮助是比较大的，因为在平时开发中，我封装组件以及hook比较频繁，我觉得TS带给我的体验层面是不错的</p>\n<p>在<code>页面开发</code>层面，其实TS大部分是做一些提示，甚至在写.vue组件的时候，看到TS的地方并不是很多，看到的也是引入封装过一些限制</p>\n<p>有一个东西比较有意思，就是<code>Typescript类型体操</code>方面，这可能算是一个拔高的地方？在面试中会遇到？我并不是很清楚，但是我看的其实比较头疼。真的不想看，而且我面试没被问过类型体操。。</p>\n<p>说实话，并没有仔细地去研究这方面，因为就我现在的开发过程中，<code>复杂的类型体操</code>过于加大了我的开发难度，而且实在用不上，当然，可能是我开发的项目过于简单，可能大佬们在大项目的开发过程中已经熟练于心了</p>\n<p>那么TS要学吗？我的建议是需要的，因为公司项目很多都在用，但是就我接触的项目中来说，TS的使用并不复杂，合理地运用TS会让项目更有健壮性，可以放心食用~</p>\n<p>当然，如果你觉得js足够，那也没有任何问题，js就是这么一个奇妙的语言~</p>\n<h2 id=\"小程序、uniAPP\"><a href=\"#小程序、uniAPP\" class=\"headerlink\" title=\"小程序、uniAPP\"></a>小程序、uniAPP</h2><p>这二者我放在一起了，比较类似</p>\n<p>小程序开发似乎是前端必备的一个技能了，目前主要是两种开发方式</p>\n<p><code>微信原生开发、UniAPP开发</code></p>\n<p>其实如果是单单开发微信小程序的话，我觉得原生的体验会好一些，我觉得这比较好理解，简单来说，微信原生小程序就是干小程序的，是官方的，而Uni会有一些限制，而且在调试的时候还要配合小程序的开发工具</p>\n<p>但是如果你考虑多端的话，那么答案也比较简单了，肯定是uni</p>\n<p>我其实是uni的粉丝，uni对于我这种个人开发者可以说是福音，它提供了一个完整的<code>全栈</code>生态，如果你说小程序也可以用云开发，没问题，但是在我当时使用的时候云开发的体验和功能方面的确不是<code>uni</code>，而且uni全栈的生态做的的确很好</p>\n<p>而且uni对我这种想独立做产品的独立开发者来说，的确很方便</p>\n<p>有很多人说小程序、说uni哪哪有问题，都是bug，真难用</p>\n<p>其实，这也是我想说的。。这二者的开发体验相较于正常的pc的确没法比</p>\n<p>但是不可否认的是，小程序在国内的用户使用度太高了，我曾经做自己产品的时候，让很多人帮忙填了问卷，就是产品的形式，大致是下面几种</p>\n<ul>\n<li>App</li>\n<li>H5</li>\n<li>PC</li>\n<li>小程序</li>\n</ul>\n<p><code>App</code>和<code>小程序</code>占了<code>90%</code>，而二者之间小程序比App还高了一些</p>\n<p>所以我觉得小程序是没有办法的办法，如果有一天小程序真的没有用户了，那我真的放俩挂鞭庆祝一下</p>\n<p>同时我需要吐槽的是小程序的组件库的确很少，基本上就选<code>Vant</code>吧，<code>Tdesign</code>小程序版的真的不好用，别的我也没用过，也不想试了。。要是<code>varlet</code>能做小程序的就好了(狗头)</p>\n<p>那么学还是不学呢？<code>我的建议是如果需要用了再学即可</code>，二者的学习成本不高，大部分可以直接做项目入手，文档也比较完善</p>\n<h2 id=\"Threejs\"><a href=\"#Threejs\" class=\"headerlink\" title=\"Threejs\"></a>Threejs</h2><p>今年比较热门的话题了，<code>前端可视化，数字孪生，3D大屏</code>，貌似很多人不知道卷什么，看3D这玩意高级，就都卷<code>ThreeJs</code>去了（<code>babylonjs</code>爆哭，为啥没有卷我）</p>\n<p>很多人觉得3D很难，没错，的确很难，但是难的是<code>openGL</code>，并不是<code>three</code>，难的是高级用法，例如<code>着色器</code>，而不是做个<code>智慧厂房</code></p>\n<p>拿我来说，你让我做个那种炫酷的高大上的粒子效果，还有很多国外的炫酷小游戏，炫酷的特效，那对不起，我真不太行，但是你拿个现成<code>模型</code>，让我做个厂房，地下室，管道，这其实是不难的。。这也是我当时做的东西</p>\n<p>而国内大部分的公司也就是要后者而已，所以没必要担心自己学不会，网上资料这么多，而且大家都有资源，没必要过于担心</p>\n<p>同时，现在可视化会和<code>零代码</code>或者是<code>低代码</code>配合在一起，比如<code>帆软</code>的产品</p>\n<p>再或者是专注于可视化产品解决方案的公司，以<code>thingjs</code>举例</p>\n<p>我觉得是比较鲜明的例子，可以没事看看</p>\n<p><strong>没有打广告，就是大家可以去关注一下现在市面上可视化的一些产品，从而进行思考</strong></p>\n<h2 id=\"Node后端\"><a href=\"#Node后端\" class=\"headerlink\" title=\"Node后端\"></a>Node后端</h2><p>这是我最想说的一个话题</p>\n<p>我理解的Node后端的框架大致是下面这些（包括但不完全）</p>\n<p><code>express、koa、koa2、egg、nest</code></p>\n<p>这是我学过并应用过的一些，我说说我的看法</p>\n<p><strong>前端有必要有一些后端的思维</strong></p>\n<p><strong>有必要学习一下这种Node后端的框架</strong></p>\n<p><strong>但是如果你没什么基础，没必要学习太复杂的</strong></p>\n<p>在国内，<code>express、koa、egg</code>其实应用已经不少，甚至我之前在公司的时候也会去用<code>express、koa</code>去写插件</p>\n<p>而且最关键的是，<code>expres、koa</code>这种的框架学习成本不高，并且已经足够你有一定的后端思维了</p>\n<p>而<code>nest</code>，我其实不是特别推荐初级前端去学习，至少在国内的话，我觉得是这样的，但是国外大可以去选择</p>\n<p>首先，<code>nest</code>的上手难度对于前端来说不低，作为<code>Java</code>出身的我，看到<code>nest</code>真的很亲切，但是更觉得<code>nest</code>在国内的受众不太行</p>\n<p>虽然工作的年限不长，但是其实我在好多公司待过，有大厂、有国企，但是在国内的公司，很难去选择nest去做公司后端架构（很少，但是不完全）</p>\n<p>90%以上会选择<code>Java</code>、甚至是<code>Go</code>等等，而且会使用<code>express、koa</code>去做插件，但是基本上不会去选择<code>nest</code></p>\n<p>可能会被很多nest的喷，因为现在nest天天被推荐，其实我并不否认，nest真的是个很好的框架，他很优秀，但是我只是觉得它不适合国内</p>\n<p>你可能会说，nest可以做完整的系统，分布式啥的都没问题，但是国内还是直接用spring全家桶</p>\n<p>你说一说nest对比spring的优势在哪呢，尤其是在国内是后端偏技术主导的情况下</p>\n<p>当然如果你的公司技术选择了nest，那真的很棒，是有助于技术提升的！</p>\n<p>当然如果你真的想去学习更系统的Node后端，那么可以去学，或者说你公司真的用到了，也可以去学，你会收获很多东西</p>\n<p>我觉得资深的前端可能更适合，因为他们可能没什么可学的了。。但是对于初级来说，真的适合吗</p>\n<p>同时目前有些大佬出的课其实是很不错，质量很高，就不说具体名字了，毕竟这里不是打广告</p>\n<h2 id=\"鸿蒙\"><a href=\"#鸿蒙\" class=\"headerlink\" title=\"鸿蒙\"></a>鸿蒙</h2><p>这里我把鸿蒙放在前端的范畴了，是因为我觉得我作为一个前端爱好者，入手鸿蒙很丝滑，并且觉得没什么门槛</p>\n<p>当然，<code>flutter</code>的小伙伴也这么觉得，所以你们说这算是移动端我也没什么意见~</p>\n<p>最近我出了一套鸿蒙的教学，开了一个专栏，起因是最近鸿蒙在掘金很火，但是教学偏少，于是就出了一些文章带着大家入门一下</p>\n<p>就我个人觉得吧，目前鸿蒙其实是有不少问题的，文档有问题，生态不完善，真机卡顿等问题，开发体验真的蛮差的</p>\n<p>所以我推荐可以当做爱好进行学习，但是说要是当饭碗来学习，至少得看明年<code>Next</code>版本怎么样才能继续说下去</p>\n<p>因为我不是培训机构，是一个比较客观的角度，所以实话实说我觉得作为一个<code>前端</code>来说，学上面的东西远比学习<code>鸿蒙</code>性价比来的高</p>\n<p>虽然我会继续做鸿蒙的专栏，但是并不代表我就很推荐去学，因为就是鸿蒙哪天真的市场真的起来了，你现学也来得及~</p>\n<p>而且那时候生态也比较完善了，对我来说，我只是觉得很感兴趣，而且比较享受这种探索的感觉，才去做的</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>有很多没细说的技术，因为其实我觉得区别不大，比如<code>React和Next</code>，我觉得就是对比<code>Vue和Nuxt</code></p>\n<p>还有一些了解并不深的东西，比如<code>低代码</code>，<code>微前端</code></p>\n<p>很遗憾，我并没有接触过这二者，所以无法进行建议和评价（但是貌似口碑都不太好？）</p>\n<p>还有就是<code>webcomponent</code>，其实这真的是个不错的东西，但是受众真的很小（这不是个新东西，这么多年了也没多火）</p>\n<p>我觉得是国内更注重产出多一些，而不是技术探索方面</p>\n<p>还有比较热门的<code>Rust</code>，也很不错，国外和开源上面广受好评，并且很适合基建方面，但是对于咱们这小开发来说，倒也先不用在意</p>\n<p>还有关于前端单测方面，这个其实我用的很多，但是基本是在开源项目当中，因为很多开源项目你不走单测的话，<code>PR</code>是不给过的，现在我主要是<code>vitest</code>，比<code>jest</code>要好用不少，但是这玩意，大家在平时公司开发的话，能用到多少呢，公司有没有正规的<code>CR</code>都不一定</p>\n<p>关于<code>monorepo</code>也不是啥新东西了，也谈不上趋势不趋势的</p>\n<p>还有一个是组件库的问题，尤其是<code>Vue</code>的，最近<code>ElementPlus</code>不知道为什么天天被喷</p>\n<p>其实现在来看<code>ElementPlus</code>的确是有一些过度封装的意思，但是我觉得目前<code>ElementPlus</code>依旧还是Vue3组件库的典范，当然还有很多组件库很优秀，不一一列举了，如果你觉得<code>ElementPlus</code>不好的话，大可以自己去搞一个，开源出来，给XDM开开眼，而且别的组件库我也都用过，别说有多多好用了。。反正我最开始用的是<code>AntdVue</code>我的使用体验。。。（当然，也很优秀！）</p>\n<p>我想说的是，人家开源出来给你简化开发过程的，你觉得不好可以提issue，提PR，而不是整天说这个不好，那个不好，没太大意义</p>\n<h1 id=\"结尾和建议\"><a href=\"#结尾和建议\" class=\"headerlink\" title=\"结尾和建议\"></a>结尾和建议</h1><p>这里更多是对初级一些的前端朋友，跟我差不多年份的</p>\n<p>高级、资深的佬就当看个乐就行</p>\n<p>如果你会<code>Vue</code>的话，建议学一下<code>React</code>，工作几率会变高的</p>\n<p><code>面试</code>八股越来越少了，就是八股也是偏难一些的八股了，基本就是挖项目了，或者是场景题</p>\n<p>当然，大厂的话还是那样，会多考一些<code>计网和操作系统</code></p>\n<p>可以去试着看一些源码，并不是<code>Vue</code>或者是<code>React</code>的，因为可能看起来并不容易，但是可以去看一些组件库的项目，比较容易懂一些，学一些思路和封装我觉得对能力是很有提升的</p>\n<p>工作难找，我发现初级的难找，佬也难找，所以也没必要过于焦虑，只能继续学下去</p>\n<p>国外远程比较火，技术栈偏向React全栈（React、Next、nest），看了一些佬的文章，看的那些招聘网站技术栈基本都是这样的</p>\n<p>别想着学Java啥的。。没必要</p>\n<p>加油吧，学无止境~</p>\n<h1 id=\"读评论\"><a href=\"#读评论\" class=\"headerlink\" title=\"读评论\"></a>读评论</h1><p>1</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98b4e9f345e8d032c326f.jpg\"></p>\n<p>2</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98bd59f345e8d032d6a95.jpg\"></p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98bf89f345e8d032dbcfc.jpg\"></p>\n<p>3</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98c469f345e8d032e6bbb.jpg\"><br><img src=\"/\"></p>\n<p>4</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98c8e9f345e8d032f1a67.jpg\"></p>\n<p>5</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98cef9f345e8d03300a1e.jpg\"></p>\n<p>6</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98d269f345e8d03308bf7.jpg\"></p>\n<p>7</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98d7e9f345e8d033158ce.jpg\"></p>\n<p>8</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98daa9f345e8d0331bd65.jpg\"></p>\n<p>9</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98dd79f345e8d03322a43.jpg\"></p>\n<p>10</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98e349f345e8d033306c5.jpg\"></p>\n<p>11</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98e6c9f345e8d033398c0.jpg\"></p>\n<p>12</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98e999f345e8d03340a2b.jpg\"></p>\n<p>13</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98f179f345e8d033535bb.jpg\"></p>\n<p>14</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c98f479f345e8d0335abbc.jpg\"></p>\n","feature":true,"text":"前言前言很简单，年终了，自己写了快两年前端（虽然刚毕业），但是大致总结一下哈哈哈哈 我觉得这个话题蛮有意思的，可以看看大家的技术广度，可以进行分享和学习以及讨论...","permalink":"/post/前端做了快两年了，盘点一下我的前端技术栈","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"好文摘录","slug":"好文摘录","count":3,"path":"api/categories/好文摘录.json"}],"tags":[{"name":"个人成长","slug":"个人成长","count":3,"path":"api/tags/个人成长.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E6%A0%88\"><span class=\"toc-text\">个人技术栈</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vue\"><span class=\"toc-text\">Vue</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Nuxt\"><span class=\"toc-text\">Nuxt</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TS\"><span class=\"toc-text\">TS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81uniAPP\"><span class=\"toc-text\">小程序、uniAPP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Threejs\"><span class=\"toc-text\">Threejs</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Node%E5%90%8E%E7%AB%AF\"><span class=\"toc-text\">Node后端</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%B8%BF%E8%92%99\"><span class=\"toc-text\">鸿蒙</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E5%AE%83\"><span class=\"toc-text\">其它</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E5%B0%BE%E5%92%8C%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">结尾和建议</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E8%AF%84%E8%AE%BA\"><span class=\"toc-text\">读评论</span></a></li></ol>","author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"写给前端的算法进阶指南，我是如何两个月零基础刷200题","uid":"86a4064166753da9cd1727d393773670","slug":"写给前端的算法进阶指南，我是如何两个月零基础刷200题","date":"2024-02-11T12:16:01.000Z","updated":"2024-02-11T12:23:00.936Z","comments":true,"path":"api/articles/写给前端的算法进阶指南，我是如何两个月零基础刷200题.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c8bc179f345e8d032ba300.jpg","text":"前言最近国内大厂面试中，出现 LeetCode 真题考察的频率越来越高了。我也观察到有越来越多的前端同学开始关注算法这个话题。 但是算法是一个门槛很高的东西，在...","permalink":"/post/写给前端的算法进阶指南，我是如何两个月零基础刷200题","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"好文摘录","slug":"好文摘录","count":3,"path":"api/categories/好文摘录.json"}],"tags":[{"name":"个人成长","slug":"个人成长","count":3,"path":"api/tags/个人成长.json"}],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"feature":true}}