{"title":"TypeScript【四】接口interface使用详解","uid":"efa903f91a28565d8dca46166c5eaa96","slug":"TypeScript【四】接口interface使用详解","date":"2023-09-09T04:30:47.000Z","updated":"2024-02-09T04:51:56.476Z","comments":true,"path":"api/articles/TypeScript【四】接口interface使用详解.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c5af439f345e8d03dbbd4f.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>接口是TypeScript中一个非常重要的概念，在其他很多语言中已经有了并且被大量使用。</p>\n<h2 id=\"1-为什么要使用接口\"><a href=\"#1-为什么要使用接口\" class=\"headerlink\" title=\"1. 为什么要使用接口\"></a>1. 为什么要使用接口</h2><h3 id=\"1-1-JavaScript存在的问题\"><a href=\"#1-1-JavaScript存在的问题\" class=\"headerlink\" title=\"1.1. JavaScript存在的问题\"></a>1.1. JavaScript存在的问题</h3><p>我们在JavaScript中定义一个函数，用于获取一个用户的姓名和年龄的字符串：</p>\n<div class=\"language-javascript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">javascript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">function</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">user</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">`</span><span style=\"color: #CCCCCC\">name: </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #61D0FF\">user</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">name</span><span style=\"color: #DA67DA\">&#125;</span><span style=\"color: #9569EC\">`</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> aage: $</span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">user.age</span><span style=\"color: #505153\">&#125;</span><span style=\"color: #9569EC\">`</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">&#125;</span></span></code></pre></div><p>正确的调用方法应该是下面的方式：</p>\n<div class=\"language-javascript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">javascript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC\">name</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> age</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #505153\">&#125;)</span></span></code></pre></div><p>但是当项目比较大，或者多人开发时，会出现错误的调用方法：</p>\n<div class=\"language-javascript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">javascript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 错误的调用  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">()</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// Uncaught TypeError: Cannot read property &#39;name&#39; of undefined  </span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC\">name</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">&#125;))</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// name: coderwhy, age: undefined  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC\">name</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">codewhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> height</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span><span style=\"color: #505153\">&#125;)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// name: coderwhy, age: undefined</span></span></code></pre></div><p>因为 JavaScript 是弱类型的语言，所以并不会对我们传入的代码进行任何的检测，但是在之前的 JavaScript 中确确实实会存在很多类似的安全隐患。</p>\n<p>如何避免这样的问题呢？</p>\n<p>当然是使用 TypeScript 来对代码进行重构</p>\n<h3 id=\"1-2-TypeScript代码重构（一）\"><a href=\"#1-2-TypeScript代码重构（一）\" class=\"headerlink\" title=\"1.2. TypeScript代码重构（一）\"></a>1.2. TypeScript代码重构（一）</h3><p>我们可以使用TypeScript来对上面的代码进行改进：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">user</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> age</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">&#125;)</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">string</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">`</span><span style=\"color: #CCCCCC\">name: </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #CCCCCC\">user</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #DA67DA\">&#125;</span><span style=\"color: #CCCCCC\"> age: </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #CCCCCC\">user</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">age</span><span style=\"color: #DA67DA\">&#125;`</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span></span></code></pre></div><p>正确的调用是如下的方式：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #505153\">&#125;);</span></span></code></pre></div><p>如果调用者出现了错误的调用，那么TypeScript 会直接给出错误的提示信息：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 错误的调用  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">();</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 错误信息：An argument for &#39;user&#39; was not provided.  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">&#125;);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 错误信息：Property &#39;age&#39; is missing in type &#39;&#123; name: string; &#125;&#39;  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC; font-style: italic\">height</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span><span style=\"color: #505153\">&#125;);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 错误信息：类型不匹配</span></span></code></pre></div><p>这样确实可以防止出现错误的调用，但是我们在定义函数的时候，参数的类型和函数的类型都是非常长的，代码非常<strong>不便于阅读</strong>。</p>\n<p>所以，我们可以使用接口来对代码再次进行重构。</p>\n<h3 id=\"1-3-TypeScript-代码重构（二）\"><a href=\"#1-3-TypeScript-代码重构（二）\" class=\"headerlink\" title=\"1.3. TypeScript 代码重构（二）\"></a>1.3. TypeScript 代码重构（二）</h3><p><strong>接口重构一：参数类型使用接口定义</strong></p>\n<p>我们先定义一个IUser接口：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 先定义一个接口  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IUser</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>接下来我们看一下函数如何来写：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">user</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IUser</span><span style=\"color: #505153\">)</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">string</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">`</span><span style=\"color: #CCCCCC\">name: </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #CCCCCC\">user</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #DA67DA\">&#125;</span><span style=\"color: #CCCCCC\">, age: </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #CCCCCC\">user</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">age</span><span style=\"color: #DA67DA\">&#125;`</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 正确的调用  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #505153\">&#125;);</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 错误的调用，其他也是一样  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">();</span></span></code></pre></div><p><strong>接口重构二：函数的类型使用接口定义（后面会详细讲解接口函数的定义）</strong></p>\n<p>我们先定义两个接口：</p>\n<ul>\n<li>第二个接口定义有一个警告，我们暂时忽略它，它的目的是如果一个函数接口只有一个方法，那么可以使用type来定义<br>  type IUserInfoFunc &#x3D; (user: IUser) &#x3D;&gt; string;</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IUser</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IUserInfoFunc</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">    (</span><span style=\"color: #61D0FF\">user</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">IUser</span><span style=\"color: #505153\">)</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">string</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>接着我们去定义函数和调用函数即可：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">getUserInfo:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IUserInfoFunc</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">user</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #DA67DA\">`</span><span style=\"color: #CCCCCC\">name: </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #CCCCCC\">user</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #DA67DA\">&#125;</span><span style=\"color: #CCCCCC\">, age: </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #CCCCCC\">user</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">age</span><span style=\"color: #DA67DA\">&#125;`</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 正确的调用  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">(&#123;</span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #505153\">&#125;);</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 错误的调用  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getUserInfo</span><span style=\"color: #505153\">();</span></span></code></pre></div><h2 id=\"2-接口的基本使用\"><a href=\"#2-接口的基本使用\" class=\"headerlink\" title=\"2. 接口的基本使用\"></a>2. 接口的基本使用</h2><h3 id=\"2-1-接口的定义方式\"><a href=\"#2-1-接口的定义方式\" class=\"headerlink\" title=\"2.1. 接口的定义方式\"></a>2.1. 接口的定义方式</h3><p>和其他很多的语言类似，TypeScript 中定义接口也是使用 interface 关键字来定义：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IPerson</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>你会发现我都在接口的前面加了一个 I，这是 tslint 要求的，否则会报一个警告</p>\n<ul>\n<li>要不要加前缀是根据公司规范和个人习惯</li>\n</ul>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9569EC\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">name</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">must</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">start</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">with</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">a</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">capitalized</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">I</span></span></code></pre></div><p>当然我们可以在 tslint 中关闭掉它：在 rules 中添加如下规则</p>\n<div class=\"language-javascript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">javascript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">interface-name</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\"> : </span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC; font-style: italic\">true</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">never-prefix</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">]</span></span></code></pre></div><h3 id=\"2-2-接口中定义方法\"><a href=\"#2-2-接口中定义方法\" class=\"headerlink\" title=\"2.2. 接口中定义方法\"></a>2.2. 接口中定义方法</h3><p>定义接口中不仅仅可以有属性，也可以有方法：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">run</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">eat</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>如果我们有一个对象是该接口类型，那么必须包含对应的属性和方法：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> p</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">run</span><span style=\"color: #505153\">() &#123;    </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">running</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">eat</span><span style=\"color: #505153\">() &#123;    </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">eating</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span></span></code></pre></div><h3 id=\"2-3-可选属性的定义\"><a href=\"#2-3-可选属性的定义\" class=\"headerlink\" title=\"2.3. 可选属性的定义\"></a>2.3. 可选属性的定义</h3><p>默认情况下一个变量（对象）是对应的接口类型，那么这个变量（对象）必须实现接口中所有的属性和方法。</p>\n<p>但是，开发中为了让接口更加的灵活，某些属性我们可能希望设计成可选的（想实现可以实现，不想实现也没有关系），这个时候就可以使用可选属性。</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #9569EC\">?:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">run</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">eat</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">study</span><span style=\"color: #9569EC\">?</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>上面的代码中，我们增加了 age 属性和 study 方法，这两个都是可选的：</p>\n<ul>\n<li><p>可选属性如果没有赋值，那么获取到的值是undefined；</p>\n</li>\n<li><p>对于可选方法，必须先进行判断，再调用，否则会报错；</p>\n</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> p</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">run</span><span style=\"color: #505153\">() &#123;  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">running</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">eat</span><span style=\"color: #505153\">() &#123;  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">eating</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">age</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// undefined  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">study</span><span style=\"color: #505153\">();</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 不能调用可能是“未定义”的对象。</span></span></code></pre></div><p>正确的调用方式如下：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9569EC\">if</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">study</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">study</span><span style=\"color: #505153\">();</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><h3 id=\"2-4-只读属性的定义\"><a href=\"#2-4-只读属性的定义\" class=\"headerlink\" title=\"2.4. 只读属性的定义\"></a>2.4. 只读属性的定义</h3><p>默认情况下，接口中定义的属性可读可写：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">流川枫</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span></span></code></pre></div><p>如果一个属性，我们只是希望在定义的时候就定义值，之后不可以修改，那么可以在属性的前面加上一个关键字：readonly</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #DA67DA\">readonly</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #9569EC\">?:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">run</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">eat</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">study</span><span style=\"color: #9569EC\">?</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>当我在name前面加上readonly时，赋值语句就会报错：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">p</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">流川枫</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// Cannot assign to &#39;name&#39; because it is a read-only property.</span></span></code></pre></div><h2 id=\"3-接口的高级使用\"><a href=\"#3-接口的高级使用\" class=\"headerlink\" title=\"3. 接口的高级使用\"></a>3. 接口的高级使用</h2><h3 id=\"3-1-函数类型的定义\"><a href=\"#3-1-函数类型的定义\" class=\"headerlink\" title=\"3.1. 函数类型的定义\"></a>3.1. 函数类型的定义</h3><p>接口不仅仅可以定义普通的对象类型，也可以定义<strong>函数的类型</strong></p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 函数类型的定义</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">SumFunc</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    (</span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">, </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">)</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">number</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 定义具体的函数  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">sum:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">SumFunc</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 调用函数  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">sum</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">20</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">30</span><span style=\"color: #505153\">));</span></span></code></pre></div><p>不过上面的接口中只有一个函数，TypeScript 会给我们一个建议，可以使用type来定义一个函数的类型：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">type</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">SumFunc</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">number</span><span style=\"color: #505153\">;</span></span></code></pre></div><h3 id=\"3-2-可索引类型的定义\"><a href=\"#3-2-可索引类型的定义\" class=\"headerlink\" title=\"3.2. 可索引类型的定义\"></a>3.2. 可索引类型的定义</h3><p>和使用接口描述函数的类型差不多，我们也可以使用接口来描述 <strong>可索引类型</strong></p>\n<ul>\n<li>比如一个变量可以这样访问：<code>a[3]</code>，<code>a[&quot;name&quot;]</code></li>\n</ul>\n<p>可索引类型具有一个 <strong>索引签名</strong>，它描述了对象索引的类型，还有相应的索引返回值类型。</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 定义可索引类型的接口  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">RoleMap</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">index</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 赋值具体的值  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 赋值方式一：  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> roleMap1</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">RoleMap</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">0</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">学生</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">1</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">讲师</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">2</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">班主任</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 赋值方式二：因为数组本身是可索引的值  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> roleMap2 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">[</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">鲁班七号</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">露娜</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">李白</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">];</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 取出对应的值  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">roleMap1</span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC\">0</span><span style=\"color: #505153\">]);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 学生  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">roleMap2</span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC\">1</span><span style=\"color: #505153\">]);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 露娜</span></span></code></pre></div><p>上面的案例中，我们的索引签名是数字类型， TypeScript支持两种索引签名：<strong>字符串和数字</strong>。</p>\n<p>我们来定义一个字符串的索引类型：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">RoleMap</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> roleMap</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">RoleMap</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">aaa</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">鲁班七号</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">bbb</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">露娜</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">ccc</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">李白</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">roleMap</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">aaa</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">roleMap</span><span style=\"color: #505153\">[</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">aaa</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">]);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 警告：不推荐这样来取</span></span></code></pre></div><p>可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型：</p>\n<p>这是因为当使用 <code>number</code>来索引时，JavaScript 会将它转换成 <code>string</code> 然后再去索引对象。</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">class</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Person</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #DA67DA\">private</span><span style=\"color: #CCCCCC\"> name</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;&quot;</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">class</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Student</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">extends</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Person</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #DA67DA\">private</span><span style=\"color: #CCCCCC\"> sno</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">0</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 下面的代码会报错  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IndexSubject</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">index</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Student</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>代码会报如下错误：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9569EC\">数字索引类型“Person”不能赋给字符串索引类型“Student”。</span></span></code></pre></div><p>修改为如下代码就可以了：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IndexSubject</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">index</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Student</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>下面的代码也会报错：</p>\n<ul>\n<li>letter 索引得到结果的类型，必须是 Person 类型或者它的子类型</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">IndexSubject</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">index</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Student</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    [</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\">]</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Person</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">letter</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><h3 id=\"3-3-接口的实现\"><a href=\"#3-3-接口的实现\" class=\"headerlink\" title=\"3.3. 接口的实现\"></a>3.3. 接口的实现</h3><p>接口除了定义某种类型规范之后，也可以和其他编程语言一样，让一个类去实现某个接口，那么这个类就必须明确去拥有这个接口中的属性和实现其方法：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 定义一个实体接口  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Entity</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">title</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">log</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 实现这样一个接口  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">class</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Post</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">implements</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Entity</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    title</span><span style=\"color: #DA67DA\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">      </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #DA67DA\">constructor</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">title</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #505153\">) &#123;  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">        </span><span style=\"color: #CCCCCC; font-style: italic\">this</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">title</span><span style=\"color: #505153\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #505153\"> </span><span style=\"color: #61D0FF\">title</span><span style=\"color: #505153\">;  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">log</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">        </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC; font-style: italic\">this</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">title</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p><strong>思考：我定义了一个接口，但是我在继承这个接口的类中还要写接口的实现方法，那我不如直接就在这个类中写实现方法岂不是更便捷，还省去了定义接口？这是一个初学者经常会有疑惑的地方。</strong></p>\n<p><strong>从思考方式上，为什么需要接口?</strong></p>\n<ul>\n<li><p>我们从生活出发理解接口</p>\n</li>\n<li><p>比如你去三亚&#x2F;杭州旅游, 玩了一上午后饥饿难耐, 你放眼望去, 会注意什么? 饭店!!</p>\n</li>\n<li><p>你可能并不会太在意这家饭店叫什么名字, 但是你知道只要后面有饭店两个字, 就意味着这个地方必然有饭店的实现 – 做各种菜给你吃；</p>\n</li>\n<li><p>接口就好比饭店&#x2F;酒店&#x2F;棋牌室这些名词后面添加的附属词, 当我们看到这些附属词后就知道它们具备的功能</p>\n</li>\n</ul>\n<p><strong>从代码设计上，为什么需要接口?</strong></p>\n<ul>\n<li><p>在代码设计中，接口是一种规范；</p>\n</li>\n<li><p>接口通常用于来定义某种规范, 类似于你必须遵守的协议, 有些语言直接就叫protocol；</p>\n</li>\n<li><p>站在程序角度上说接口只规定了类里必须提供的属性和方法，从而分离了规范和实现，增强了系统的可拓展性和可维护性；</p>\n</li>\n</ul>\n<p>当然，对于初次接触接口的人，还是很难理解它在实际的代码设计中的好处，这点慢慢体会，不用心急。</p>\n<h3 id=\"3-3-接口的继承\"><a href=\"#3-3-接口的继承\" class=\"headerlink\" title=\"3.3. 接口的继承\"></a>3.3. 接口的继承</h3><p>和类相似，接口也是可以继承接口来提供复用性：</p>\n<ul>\n<li>注意：继承使用extends关键字</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Barkable</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">barking</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Shakable</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">shaking</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">interface</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Petable</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">extends</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Barkable</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Shakable</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">eating</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>接口Petable继承自Barkable和Shakable，另外我们发现一个接口可以同时继承自多个接口</p>\n<p>如果现在有一个类实现了Petable接口，那么不仅仅需要实现Petable的方法，也需要实现Petable继承自的接口中的方法：</p>\n<ul>\n<li>注意：实现接口使用implements关键字</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">class</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Dog</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">implements</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Petable</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">barking</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\"> &#123;  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">汪汪叫</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">shaking</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\"> &#123;  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">摇尾巴</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">eating</span><span style=\"color: #505153\">()</span><span style=\"color: #9569EC\">:</span><span style=\"color: #505153\"> </span><span style=\"color: #9569EC\">void</span><span style=\"color: #505153\"> &#123;  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    </span><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">吃骨头</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">    &#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>学如逆水行舟，不进则退</p>\n<hr>\n<p>谢谢款待</p>\n<p><code>2023</code> <code>09</code> <code>09</code></p>\n","text":"前言接口是TypeScript中一个非常重要的概念，在其他很多语言中已经有了并且被大量使用。 1. 为什么要使用接口1.1. JavaScript存在的问题我们...","permalink":"/post/TypeScript【四】接口interface使用详解","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript 入门","slug":"TypeScript-入门","count":4,"path":"api/tags/TypeScript-入门.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1. 为什么要使用接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-JavaScript%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.1. JavaScript存在的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-TypeScript%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89\"><span class=\"toc-text\">1.2. TypeScript代码重构（一）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-TypeScript-%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89\"><span class=\"toc-text\">1.3. TypeScript 代码重构（二）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 接口的基本使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2.1. 接口的定义方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.2. 接口中定义方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">2.3. 可选属性的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">2.4. 只读属性的定义</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3. 接口的高级使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">3.1. 函数类型的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%8F%AF%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">3.2. 可索引类型的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3.3. 接口的实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">3.3. 接口的继承</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li></ol>","author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"前端框架开发【一】邂逅Vue3和TypeScript","uid":"855e657882f14bd8507dfda3eeaac0bb","slug":"前端框架开发【一】邂逅Vue3和TypeScript","date":"2023-09-10T02:55:21.000Z","updated":"2024-02-11T03:07:52.447Z","comments":true,"path":"api/articles/前端框架开发【一】邂逅Vue3和TypeScript.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c839ff9f345e8d03c8fec9.jpg","text":"1. 为什么要学习 Vue？1.1. 三个框架的对比当你学习到这里的，我就默认你已经知道了前端现在流行的三大框架：Vue、React、Angular Angul...","permalink":"/post/前端框架开发【一】邂逅Vue3和TypeScript","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"VUE","slug":"VUE","count":9,"path":"api/categories/VUE.json"}],"tags":[{"name":"VUE 入门","slug":"VUE-入门","count":9,"path":"api/tags/VUE-入门.json"}],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}}},"next_post":{"title":"TypeScript【三】定义变量和数据类型","uid":"3a056f889a88e7c415c2526b3ac8783b","slug":"TypeScript【三】定义变量和数据类型","date":"2023-09-08T02:34:03.000Z","updated":"2024-02-09T04:51:48.517Z","comments":true,"path":"api/articles/TypeScript【三】定义变量和数据类型.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c5af439f345e8d03dbbd4f.jpg","text":"前言学习如何在 TypeScript 中定义变量，以及 JavaScript 类型在 TypeScript 中的变化以及 TypeScript 中新增的类型。 ...","permalink":"/post/TypeScript【三】定义变量和数据类型","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript 入门","slug":"TypeScript-入门","count":4,"path":"api/tags/TypeScript-入门.json"}],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}}}}