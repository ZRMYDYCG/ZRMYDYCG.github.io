{"title":"instanceof运算符的作用和核心原理、手写实现instanceof","uid":"a9f8557ca7080d70ea4e6c836e38c7fb","slug":"2.instanceof运算符的作用和核心原理、手写实现instanceof","date":"2024-06-17T07:17:21.000Z","updated":"2024-06-17T07:32:21.577Z","comments":true,"path":"api/articles/2.instanceof运算符的作用和核心原理、手写实现instanceof.json","keywords":null,"cover":[],"content":"<h2 id=\"instanceof-运算符的作用\"><a href=\"#instanceof-运算符的作用\" class=\"headerlink\" title=\"instanceof 运算符的作用\"></a>instanceof 运算符的作用</h2><ol>\n<li>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上 ，返回一个布尔值:</li>\n</ol>\n<p>也即是否存在构造函数的原型对象 prototype；有则返回 true，否则返回 false。</p>\n<p>也就是说 instanceof 左边值的__proto__ 是否能找到 instanceof 右边值的 prototype，如果能找到就返回 true 。</p>\n<div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">function</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Animal</span><span style=\"color: #505153\">()</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">var</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">ani</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> new </span><span style=\"color: #9569EC\">Animal</span><span style=\"color: #505153\">();</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">ani</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Animal</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">ani</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">__proto__</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">===</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">Animal</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">ani</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">constructor</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">//ƒ Animal() &#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #CCCCCC\">Animal</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">constructor</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// ƒ Function() &#123; [native code] &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">ani</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC; font-style: italic\">Animal</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #505153\">);</span></span></code></pre></div><p><img src=\"/./images/2-1.png\"></p>\n<ol start=\"2\">\n<li>instanceof 操作符可以正确的判断对象的类型:</li>\n</ol>\n<p>instanceof 操作符只能正确判断引用数据类型，而不能判断基本数据类型</p>\n<div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">2</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Number</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">                    </span><span style=\"color: #65666B; font-style: italic\">// false</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC; font-style: italic\">true</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Boolean</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">                </span><span style=\"color: #65666B; font-style: italic\">// false </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&#39;</span><span style=\"color: #CCCCCC\">str</span><span style=\"color: #505153\">&#39;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">String</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">                </span><span style=\"color: #65666B; font-style: italic\">// false </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\"> </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">([]</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Array</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">                    </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #DA67DA\">function</span><span style=\"color: #505153\">()&#123;&#125;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Function</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">       </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(&#123;&#125;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Object</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\">                   </span><span style=\"color: #65666B; font-style: italic\">// true</span></span></code></pre></div><h2 id=\"instanceof-的核心原理\"><a href=\"#instanceof-的核心原理\" class=\"headerlink\" title=\"instanceof 的核心原理\"></a>instanceof 的核心原理</h2><p>通过检查某个对象（object）的原型链是否包含构造函数（constructor） 的原型对象。</p>\n<blockquote>\n<p>如果 object 的原型链中存在 constructor 的原型对象，那么 object 就是 constructor 的一个实例，返回值为 true。</p>\n</blockquote>\n<blockquote>\n<p>如果 obiect 的原型链中不存在 constructor 的原型对象，那么 object 就不是 constructor 的实例，返回值为 false </p>\n</blockquote>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><blockquote>\n<p>由于 instanceof 是基于原型链的检查，因此如果某个对象的原型链比较深，那么检查的效率会比较低</p>\n</blockquote>\n<h2 id=\"手写实现-instanceof\"><a href=\"#手写实现-instanceof\" class=\"headerlink\" title=\"手写实现 instanceof\"></a>手写实现 instanceof</h2><div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">function</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">myInstanceof</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">obj</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">constructor</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 获取构造函数的原型对象（显示原型）</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> prototype </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">constructor</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 获取实例对象 obj 的原型（隐式原型）</span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// let proto = obj.__proto__;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">proto</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Object</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">getPrototypeOf</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">obj</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 循环进行查找原型 直到 Object.prototype.__proto__  === null</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">while</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">proto</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC\">if</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">proto</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">===</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">直接返回</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">proto</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">proto</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">prototype</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">true</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #505153\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">循环查找</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">proto</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">proto</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">prototype</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #65666B; font-style: italic\">//   proto = proto.__proto__; // 重点(核心)：层层向上遍历</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #61D0FF\">proto</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Object</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">getPrototypeOf</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">proto</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 重点(核心)：层层向上遍历</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">false</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">function</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Animal</span><span style=\"color: #505153\">()</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">function</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Cat</span><span style=\"color: #505153\">()</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #9569EC; font-style: italic\">Cat</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> new </span><span style=\"color: #9569EC\">Animal</span><span style=\"color: #505153\">();</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">var</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">cat</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> new </span><span style=\"color: #9569EC\">Cat</span><span style=\"color: #505153\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">function</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">BS</span><span style=\"color: #505153\">()</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #9569EC; font-style: italic\">BS</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #61D0FF\">prototype</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> new </span><span style=\"color: #9569EC\">Cat</span><span style=\"color: #505153\">();</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">var</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">bs</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> new </span><span style=\"color: #9569EC\">BS</span><span style=\"color: #505153\">();</span></span></code></pre></div><blockquote>\n<p>cat 是一个 Cat 的实例，因为 Cat.prototype 是 Animal 的一个实例，所以 cat 的原型链上包含Animal.prototype，从而 cat instanceof Animal 也返回true。</p>\n</blockquote>\n<div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">=== 第一组start ===</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">bs</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">BS</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">myInstanceof</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">bs</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">BS</span><span style=\"color: #505153\">));</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">=== 第二组start ===</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">bs</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Cat</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">myInstanceof</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">bs</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Cat</span><span style=\"color: #505153\">));</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span></code></pre></div><p><img src=\"/./images/2-2.png\"></p>\n<div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">=== 第三组start ===</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">bs</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Animal</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">myInstanceof</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">bs</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Animal</span><span style=\"color: #505153\">));</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">=== 第四组start ===</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">cat</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">BS</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// false</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">myInstanceof</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">cat</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">BS</span><span style=\"color: #505153\">));</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// false</span></span></code></pre></div><p><img src=\"/./images/2-3.png\"></p>\n<div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">=== 第五组start ===</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">cat</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Cat</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">myInstanceof</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">cat</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Cat</span><span style=\"color: #505153\">));</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">=== 第六组start ===</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">cat</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">instanceof</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Animal</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #9569EC\">myInstanceof</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">cat</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">Animal</span><span style=\"color: #505153\">));</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// true</span></span></code></pre></div><p><img src=\"/./images/2-4.png\"></p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>需要注意的是，instanceof 运算符只能用于检查对象是否是某个构造函数的实例，不能用于基本类型(如字符串、数字等)的检查。</p>\n<blockquote>\n<p>如果检查的对象不是一个对象类型，instanceof 会抛出一个TypeError异常。</p>\n</blockquote>\n<p>此外，由于 instanceof 是基于原型链的检查，因此如果某个对象的原型链比较深，那么检查的效率会比较低。</p>\n<p>instanceof 操作符判断的是对象的原型链，因此如果一个对象是某个类的实例，那么它一定是该类的原型链上的某个对象的实例。</p>\n<blockquote>\n<p>因此，如果一个对象的原型链上没有该类的原型对象，那么它就不是该类的实例，即使它与该类具有相同的属性和方法。</p>\n</blockquote>\n","feature":true,"text":"instanceof 运算符的作用 用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上 ，返回一个布尔值: 也即是否存在构造函数的原型...","permalink":"/post/2.instanceof运算符的作用和核心原理、手写实现instanceof","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#instanceof-%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">instanceof 运算符的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#instanceof-%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">instanceof 的核心原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0-instanceof\"><span class=\"toc-text\">手写实现 instanceof</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95\"><span class=\"toc-text\">拓展</span></a></li></ol>","author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"递归函数","uid":"53dfb9678f45977f157c0c1627bb560b","slug":"3.递归函数","date":"2024-06-17T08:17:21.000Z","updated":"2024-11-06T12:50:22.134Z","comments":true,"path":"api/articles/3.递归函数.json","keywords":null,"cover":null,"text":"递归的概念和原理: 在一个函数内部可以调用其它的函数, 如果一个函数在内部调用的是其自身, 那么这个函数就是递归函数。但是, 为什么要这么做呢? 举个例子来说:...","permalink":"/post/3.递归函数","photos":[],"count_time":{"symbolsCount":390,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"feature":true},"next_post":{"title":"前后端通信常用的数据格式","uid":"e149d08797465a80ca26c5e88e2e8f05","slug":"1.基于原生js和node实现文件上传和大文件切片上传","date":"2024-06-16T11:56:58.000Z","updated":"2024-11-06T12:48:31.757Z","comments":true,"path":"api/articles/1.基于原生js和node实现文件上传和大文件切片上传.json","keywords":null,"cover":null,"text":"如下数据格式是在前后端通信过程中常用到的: 1、application&#x2F;json: 这种格式将数据转换成JSON格式的字符串。 例如，如果有一个Jav...","permalink":"/post/1.基于原生js和node实现文件上传和大文件切片上传","photos":[],"count_time":{"symbolsCount":841,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"feature":true}}