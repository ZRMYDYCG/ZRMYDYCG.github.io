{"title":"递归函数","uid":"53dfb9678f45977f157c0c1627bb560b","slug":"3.递归函数","date":"2024-06-17T08:17:21.000Z","updated":"2024-11-06T12:50:22.134Z","comments":true,"path":"api/articles/3.递归函数.json","keywords":null,"cover":null,"content":"<p>递归的概念和原理:</p>\n<p>在一个函数内部可以调用其它的函数, 如果一个函数在内部调用的是其自身, 那么这个函数就是递归函数。但是, 为什么要这么做呢? </p>\n<p>举个例子来说: 我们要计算阶乘 <code>n!= 1 x 2 x 3 x ... x n</code>, 如果我们使用函数 fact(n) 来表示, 可以看出 fact(n) &#x3D; n! &#x3D; 1 x 2 x 3 x 4 x … x (n - 1) x n &#x3D; (n - 1)! x n &#x3D; fact(n - 1) x n, 所以, fact(n) 可以表示为 n x fact(n - 1), 只有 n &#x3D; 1 时需要做特殊处理。</p>\n<p>如下是用代码实现计算阶乘的递归函数:</p>\n<div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">def</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">fact</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">n</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\">:</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC\">if</span><span style=\"color: #CCCCCC\"> n </span><span style=\"color: #9569EC\">==</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1</span><span style=\"color: #CCCCCC\">; </span><span style=\"color: #9569EC\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC\">return</span><span style=\"color: #CCCCCC\"> n </span><span style=\"color: #9569EC\">*</span><span style=\"color: #CCCCCC\"> fact(n </span><span style=\"color: #9569EC\">-</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1</span><span style=\"color: #CCCCCC\">)</span></span></code></pre></div>","feature":true,"text":"递归的概念和原理: 在一个函数内部可以调用其它的函数, 如果一个函数在内部调用的是其自身, 那么这个函数就是递归函数。但是, 为什么要这么做呢? 举个例子来说:...","permalink":"/post/3.递归函数","photos":[],"count_time":{"symbolsCount":390,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"instanceof运算符的作用和核心原理、手写实现instanceof","uid":"a9f8557ca7080d70ea4e6c836e38c7fb","slug":"2.instanceof运算符的作用和核心原理、手写实现instanceof","date":"2024-06-17T07:17:21.000Z","updated":"2024-06-17T07:32:21.577Z","comments":true,"path":"api/articles/2.instanceof运算符的作用和核心原理、手写实现instanceof.json","keywords":null,"cover":[],"text":"instanceof 运算符的作用 用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上 ，返回一个布尔值: 也即是否存在构造函数的原型...","permalink":"/post/2.instanceof运算符的作用和核心原理、手写实现instanceof","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"feature":true}}