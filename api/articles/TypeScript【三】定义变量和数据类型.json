{"title":"TypeScript【三】定义变量和数据类型","uid":"3a056f889a88e7c415c2526b3ac8783b","slug":"TypeScript【三】定义变量和数据类型","date":"2023-09-08T02:34:03.000Z","updated":"2024-02-09T04:51:48.517Z","comments":true,"path":"api/articles/TypeScript【三】定义变量和数据类型.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c5af439f345e8d03dbbd4f.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习如何在 TypeScript 中定义变量，以及 JavaScript 类型在 TypeScript 中的变化以及 TypeScript 中新增的类型。</p>\n<h2 id=\"1-声明变量方式\"><a href=\"#1-声明变量方式\" class=\"headerlink\" title=\"1. 声明变量方式\"></a>1. 声明变量方式</h2><h3 id=\"1-1-声明变量的格式\"><a href=\"#1-1-声明变量的格式\" class=\"headerlink\" title=\"1.1.  声明变量的格式\"></a>1.1.  声明变量的格式</h3><p>在 TypeScript 中定义变量需要指定 <strong>标识符</strong> 的类型。</p>\n<p>所以完整的声明格式如下：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">var</span><span style=\"color: #CCCCCC\">/</span><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\">/</span><span style=\"color: #61D0FF\">const</span><span style=\"color: #CCCCCC\"> 标识符</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">数据类型</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">赋值</span><span style=\"color: #505153\">;</span></span></code></pre></div><p>比如我们声明一个message，完整的写法如下：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">message</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">Hello World</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">message</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">Hello TypeScript</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 正确的做法</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">message</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">20</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 错误的做法，因为message是一个string类型</span></span></code></pre></div><ul>\n<li><p>注意：这里的string是小写的，和String是有区别的</p>\n</li>\n<li><p>string是 TypeScript 中定义的字符串类型，String 是 ECMAScript 中定义的一个类。</p>\n</li>\n</ul>\n<h3 id=\"1-2-声明变量的关键字\"><a href=\"#1-2-声明变量的关键字\" class=\"headerlink\" title=\"1.2. 声明变量的关键字\"></a>1.2. 声明变量的关键字</h3><p>在TypeScript定义变量（标识符）和ES6之后一致，可以使用var、let、const来定义：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">var</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">myname</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">abc</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">myage</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">20</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> myheight</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span><span style=\"color: #505153\">;</span></span></code></pre></div><p>但是，我们会发现使用var关键字会有一个警告：</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>Forbidden ‘var’keyword,use ‘let’or ‘const’instead</p>\n</div>\n<p>可见，在 TypeScript 中并不建议再使用 var 关键字了，主要原因和 ES6 升级后 let 和 var 的区别是一样的，var是没有块级作用域的，会引起很多的问题。</p>\n<p>所以，在之后的开发中，我们定义变量主要使用 let 和 const。</p>\n<h3 id=\"1-3-变量的类型推断\"><a href=\"#1-3-变量的类型推断\" class=\"headerlink\" title=\"1.3. 变量的类型推断\"></a>1.3. 变量的类型推断</h3><p>在开发中，有时候为了方便起见我们并不会在声明每一个变量时都写上对应的数据类型，我们更希望可以通过TypeScript本身的特性帮助我们推断出对应的变量类型：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">message</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">Hello World</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span></span></code></pre></div><p>上面的代码我们并没有指定类型，但是message实际上依然是一个字符串类型。</p>\n<p>这是因为在一个变量第一次赋值时，会根据后面的赋值内容的类型，来推断出变量的类型：</p>\n<p>上面的message就是因为后面赋值的是一个string类型，所以message虽然没有明确的说明，但是依然是一个string类型。</p>\n<h3 id=\"1-4-声明-name-报错\"><a href=\"#1-4-声明-name-报错\" class=\"headerlink\" title=\"1.4. 声明 name 报错\"></a>1.4. 声明 name 报错</h3><p>我们在TypeScript的文件中声明一个name（很多其他的名字也会）时，会报错：</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c4da989f345e8d032b61a5.jpg\"></p>\n<p>主要错误信息：</p>\n<p>无法重新声明块范围变量 name</p>\n<p>我们前面明明（明明说管我什么事）没有声明 name，但是却说我们重复声明了</p>\n<ul>\n<li><p>这次是因为我们的<code>typescript</code> 将 <code>DOM typings</code> 作为全局的运行环境。</p>\n</li>\n<li><p>所以当我们声明 <code>name</code>时， 与 <code>DOM</code> 中的全局  <code>name</code> 属性出现了重名。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/65c4daf69f345e8d032caf0e.jpg\"></p>\n<p>如何解决这个问题呢？</p>\n<ul>\n<li>有两种方案：去掉 DOM typings 的环境和声明模块</li>\n</ul>\n<p><strong>方式一：删除DOM typings的环境</strong></p>\n<p>但是这种办法对于我们来说并不合适，因为我们依然希望在DOM下编译我们的TypeScript代码。</p>\n<p><strong>方式二：声明我们的ts文件为一个模块</strong></p>\n<p>既然与全局的变量出现重名，那我们将脚本封装到模块（module）中，因为模块有属于自己的作用域，就不会和全局的产生冲突：</p>\n<ul>\n<li>在 Typescript 中，我们可以使用ES6的export来导出一个对象，并且该文件被视为 module</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">name</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">coderwhy</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span><span style=\"color: #9569EC; font-style: italic\">export</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;&#125;;</span></span></code></pre></div><h3 id=\"1-5-console-log报错\"><a href=\"#1-5-console-log报错\" class=\"headerlink\" title=\"1.5. console.log报错\"></a>1.5. console.log报错</h3><p>另外为了测试方便我们经常使用console.log来进行测试，但是使用时会报一个警告。</p>\n<p>这个时候，我们可以配置：</p>\n<p><code>tslint.json</code></p>\n<div class=\"language-json\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">json</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #61D0FF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #9569EC; font-style: italic\">defaultSeverity</span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #DA67DA\">: </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">error</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #9569EC; font-style: italic\">extends</span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #DA67DA\">: </span><span style=\"color: #61D0FF\">[</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">        </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">tslint:recommended</span><span style=\"color: #505153\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #61D0FF\">]</span><span style=\"color: #DA67DA\">,</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #9569EC; font-style: italic\">jsRules</span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #DA67DA\">: </span><span style=\"color: #61D0FF\">&#123;&#125;</span><span style=\"color: #DA67DA\">,</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #9569EC; font-style: italic\">rules</span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #DA67DA\">: </span><span style=\"color: #61D0FF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">        </span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #9569EC; font-style: italic\">no-console</span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #DA67DA\">: </span><span style=\"color: #61D0FF; font-style: italic\">false</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #61D0FF\">&#125;</span><span style=\"color: #DA67DA\">,</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #9569EC; font-style: italic\">rulesDirectory</span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #DA67DA\">: </span><span style=\"color: #61D0FF\">[]</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">&#125;</span></span></code></pre></div><p>添加了：</p>\n<div class=\"language-json\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">json</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">rules</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">: </span><span style=\"color: #61D0FF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">    </span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #9569EC; font-style: italic\">no-console</span><span style=\"color: #505153; font-style: italic\">&quot;</span><span style=\"color: #DA67DA\">: </span><span style=\"color: #61D0FF; font-style: italic\">false</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">&#125;</span></span></code></pre></div><h2 id=\"2-JavaScript-数据类型\"><a href=\"#2-JavaScript-数据类型\" class=\"headerlink\" title=\"2. JavaScript 数据类型\"></a>2. JavaScript 数据类型</h2><h3 id=\"2-1-number类型\"><a href=\"#2-1-number类型\" class=\"headerlink\" title=\"2.1. number类型\"></a>2.1. number类型</h3><p>数字类型是我们开发中经常使用的类型，TypeScript和JavaScript一样，不区分整数类型（int）和浮点型（double），统一为number类型。</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 1.数字类型基本定义</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">100</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">num</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">20</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">num</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">6.66</span><span style=\"color: #505153\">;</span></span></code></pre></div><p>ES6新增了二进制和八进制的表示方法，而TypeScript也是支持二进制、八进制、十六进制的表示：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 2.其他进制表示  </span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">num</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">100</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 十进制  </span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">num</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">0b110</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 二进制  </span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">num</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">0o555</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 八进制  </span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">num</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">0xf23</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 十六进制</span></span></code></pre></div><h3 id=\"2-2-boolean类型\"><a href=\"#2-2-boolean类型\" class=\"headerlink\" title=\"2.2. boolean类型\"></a>2.2. boolean类型</h3><p>boolean类型只有两个取值：true和false，非常简单</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// boolean类型的表示</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">flag</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">boolean</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">true</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">flag</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">false</span><span style=\"color: #505153\">;</span><span style=\"color: #61D0FF\">flag</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">20</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">30</span><span style=\"color: #505153\">;</span></span></code></pre></div><h3 id=\"2-3-string类型\"><a href=\"#2-3-string类型\" class=\"headerlink\" title=\"2.3. string类型\"></a>2.3. string类型</h3><p>string 类型是字符串类型，可以使用单引号或者双引号表示：</p>\n<ul>\n<li>注意：如果打开了 TSLint，默认情况下推荐使用使用双引号</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// string类型表示</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">message</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">Hello World</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">message</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#39;</span><span style=\"color: #CCCCCC\">Hello TypeScript</span><span style=\"color: #505153\">&#39;</span><span style=\"color: #505153\">;</span></span></code></pre></div><p>同时也支持ES6的模板字符串来拼接变量和字符串：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> name </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> age </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> height </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> info </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">`</span><span style=\"color: #CCCCCC\">my name is </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #61D0FF\">name</span><span style=\"color: #DA67DA\">&#125;</span><span style=\"color: #CCCCCC\">, age is </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #61D0FF\">age</span><span style=\"color: #DA67DA\">&#125;</span><span style=\"color: #CCCCCC\">, height is </span><span style=\"color: #DA67DA\">$&#123;</span><span style=\"color: #61D0FF\">height</span><span style=\"color: #DA67DA\">&#125;`</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">info</span><span style=\"color: #505153\">);</span></span></code></pre></div><h3 id=\"2-4-array类型\"><a href=\"#2-4-array类型\" class=\"headerlink\" title=\"2.4. array类型\"></a>2.4. array类型</h3><p>数组类型的定义也非常简单，有两种方式：</p>\n<ul>\n<li>但是TSLint会推荐我们使用上面这种方式</li>\n</ul>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> names1</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">string</span><span style=\"color: #CCCCCC\">[] </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">[</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">abc</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">cba</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">];</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> names2</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Array</span><span style=\"color: #61D0FF\">&lt;string&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">[</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">abc</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">cba</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">];</span></span></code></pre></div><h3 id=\"2-5-object类型\"><a href=\"#2-5-object类型\" class=\"headerlink\" title=\"2.5. object类型\"></a>2.5. object类型</h3><p>object对象类型可以用于描述一个对象：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// object类型表示</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> myinfo</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">object</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">name</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">age</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">20</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">height</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span></span></code></pre></div><p><strong>属性是不可以访问的</strong></p>\n<p>如果我们访问myinfo中的属性，会发现报错：</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c4e2c29f345e8d034a1a33.jpg\"></p>\n<p>这是因为TypeScript并不知道某一个object类型上面就有一个name的属性。</p>\n<p>但是如果我们让它是类型推断的写法，就可以正常的访问：</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c4e3329f345e8d034b93d8.jpg\"></p>\n<p>还有一种方法是定义接口，TypeScript一个非常好用的特性就是接口interface。</p>\n<h3 id=\"2-6-symbol类型\"><a href=\"#2-6-symbol类型\" class=\"headerlink\" title=\"2.6. symbol类型\"></a>2.6. symbol类型</h3><p>在ES5中，如果我们是不可以在对象中添加相同的属性名称的，比如下面的做法：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> person </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">identity</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">程序员</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #CCCCCC; font-style: italic\">identity</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">老师</span><span style=\"color: #505153\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span></code></pre></div><p>通常我们的做法是定义两个不同的属性名字：比如identity1和identity2。</p>\n<p>但是我们也可以通过symbol来定义相同的名称，因为Symbol函数返回的是不同的值：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> s1 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Symbol</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">identity</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> s2 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Symbol</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">identity</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">);</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> person </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #505153; font-style: italic\">[</span><span style=\"color: #61D0FF; font-style: italic\">s1</span><span style=\"color: #505153; font-style: italic\">]</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">程序员</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #505153; font-style: italic\">[</span><span style=\"color: #61D0FF; font-style: italic\">s2</span><span style=\"color: #505153; font-style: italic\">]</span><span style=\"color: #DA67DA; font-style: italic\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">老师</span><span style=\"color: #505153\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span></span></code></pre></div><h3 id=\"2-7-null和undefined\"><a href=\"#2-7-null和undefined\" class=\"headerlink\" title=\"2.7. null和undefined\"></a>2.7. null和undefined</h3><p>在 JavaScript 中，undefined 和 null 是两个基本数据类型。</p>\n<p>在TypeScript中，它们各自的类型也是undefined和null，也就意味着它们既是实际的值，也是自己的类型：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> n</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">null</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">null</span><span style=\"color: #505153\">;</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> u</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">undefined</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">undefined</span><span style=\"color: #505153\">;</span></span></code></pre></div><h2 id=\"3-TypeScript-引入的数据类型\"><a href=\"#3-TypeScript-引入的数据类型\" class=\"headerlink\" title=\"3. TypeScript 引入的数据类型\"></a>3. TypeScript 引入的数据类型</h2><p>TypeScript 在原有的 JavaScript 基础上引入了很多好用的类型：enum 枚举类型、tuple 元组类型、any 类型、void 类型、never 类型等。</p>\n<h3 id=\"3-1-enum-类型\"><a href=\"#3-1-enum-类型\" class=\"headerlink\" title=\"3.1. enum 类型\"></a>3.1. enum 类型</h3><h4 id=\"3-1-1-枚举的基本定义\"><a href=\"#3-1-1-枚举的基本定义\" class=\"headerlink\" title=\"3.1.1. 枚举的基本定义\"></a>3.1.1. 枚举的基本定义</h4><p>枚举类型在很多语言都有的类型，比如C++、Java等等，并且也非常好用，所以TypeScript引入了enum类型，让我们开发更好的方便和安全。</p>\n<p>枚举类型通常是定义一组数据：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">enum</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Direction</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    EAST</span><span style=\"color: #DA67DA\">,</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    WEST</span><span style=\"color: #DA67DA\">,</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    NORTH</span><span style=\"color: #DA67DA\">,</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    SOUTH</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> d1 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Direction</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">EAST</span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> d2 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Direction</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">NORTH</span></span></code></pre></div><h4 id=\"3-1-2-枚举类型的值\"><a href=\"#3-1-2-枚举类型的值\" class=\"headerlink\" title=\"3.1.2. 枚举类型的值\"></a>3.1.2. 枚举类型的值</h4><p>枚举类型有自己的值，比如打印上面的d1和d2</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">d1</span><span style=\"color: #505153\">)</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">d2</span><span style=\"color: #505153\">)</span></span></code></pre></div><div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9569EC\">------</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">控制台</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">------</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">0</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">2</span></span></code></pre></div><p>默认情况下，枚举中的数据是从0开始的，我们可以改变它的初始化值，比如下面的代码：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">enum</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Direction</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    EAST </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">10</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    WEST</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    NORTH</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    SOUTH</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> d1 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Direction</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">EAST</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> d2 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Direction</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">NORTH</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">d1</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 10  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">d2</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 12</span></span></code></pre></div><p>也可以全部自己来指定：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">enum</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Direction</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    EAST </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">10</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    WEST </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">20</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    NORTH </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">30</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    SOUTH </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">40</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> d1 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Direction</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">EAST</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> d2 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> Direction</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">NORTH</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">d1</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 10  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">d2</span><span style=\"color: #505153\">);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 30</span></span></code></pre></div><p>我们也可以通过对应的值去获取对应的数据名称：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">Direction</span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC\">10</span><span style=\"color: #505153\">]);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// EAST  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">Direction</span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC\">30</span><span style=\"color: #505153\">]);</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// NORTH</span></span></code></pre></div><h3 id=\"3-2-tuple-类型\"><a href=\"#3-2-tuple-类型\" class=\"headerlink\" title=\"3.2. tuple 类型\"></a>3.2. tuple 类型</h3><h4 id=\"3-2-1-tuple的基本使用\"><a href=\"#3-2-1-tuple的基本使用\" class=\"headerlink\" title=\"3.2.1. tuple的基本使用\"></a>3.2.1. tuple的基本使用</h4><p>tuple是元组类型，很多语言中也有这种数据类型，比如Python、Swift等。</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> tInfo</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> [</span><span style=\"color: #61D0FF\">string</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\">] </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">[</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span><span style=\"color: #505153\">];</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> item1 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">tInfo</span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC\">0</span><span style=\"color: #505153\">];</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// why, 并且知道类型是string类型  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> item2 </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">tInfo</span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC\">1</span><span style=\"color: #505153\">];</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// 18, 并且知道类型是number类型</span></span></code></pre></div><h4 id=\"3-2-1-tuple-和数组类比\"><a href=\"#3-2-1-tuple-和数组类比\" class=\"headerlink\" title=\"3.2.1. tuple 和数组类比\"></a>3.2.1. tuple 和数组类比</h4><p>初学 tuple 会觉得它和数组非常相似</p>\n<p>但是数组中通常会定义一组相同的数据，如果数据不同会造成类型的丢失：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> aInfo</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">Array</span><span style=\"color: #61D0FF\">&lt;string</span><span style=\"color: #9569EC\">|</span><span style=\"color: #61D0FF\">number&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">[</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span><span style=\"color: #505153\">];</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> itema </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">aInfo</span><span style=\"color: #505153\">[</span><span style=\"color: #9569EC\">0</span><span style=\"color: #505153\">];</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #65666B; font-style: italic\">// why，但是并不知道itema是string类型还是number类型</span></span></code></pre></div><h3 id=\"3-3-any类型\"><a href=\"#3-3-any类型\" class=\"headerlink\" title=\"3.3. any类型\"></a>3.3. any类型</h3><p>在某些情况下，我们确实无法确定一个变量的类型，并且可能它会发生一些变化，这个时候我们可以使用any类型（类似于Dart语言中的dynamic类型）</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">let</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">a</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">any</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">;</span><span style=\"color: #61D0FF\">a</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">123</span><span style=\"color: #505153\">;</span><span style=\"color: #61D0FF\">a</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC; font-style: italic\">true</span><span style=\"color: #505153\">;</span><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> aArray</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">any</span><span style=\"color: #CCCCCC\">[] </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">[</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">why</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">18</span><span style=\"color: #DA67DA\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1.88</span><span style=\"color: #505153\">];</span></span></code></pre></div><h3 id=\"3-4-void类型\"><a href=\"#3-4-void类型\" class=\"headerlink\" title=\"3.4. void类型\"></a>3.4. void类型</h3><p>void 类型通常用于函数没有返回值时来使用：</p>\n<p>在 TypeScript 中函数也是有类型的</p>\n<p>下面的函数，虽然我们没有指定它的类型，但是它会通过类型推导出来：</p>\n<div class=\"language-typescript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">typescript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">sum</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #65666B; font-style: italic\">// 相当于下面的写法  </span></span>\n<span class=\"line\"><span style=\"color: #DA67DA\">const</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">sum:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #61D0FF\">number</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #9569EC\">:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">number</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">=&gt;</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #9569EC; font-style: italic\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num1</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #DA67DA\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">num2</span><span style=\"color: #505153\">;</span><span style=\"color: #CCCCCC\">  </span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;;</span></span></code></pre></div><p><img src=\"https://pic.imgdb.cn/item/65c57f479f345e8d03872d00.jpg\"></p>\n<h3 id=\"3-5-never类型\"><a href=\"#3-5-never类型\" class=\"headerlink\" title=\"3.5. never类型\"></a>3.5. never类型</h3><p>never类型表示一种从来不会存在的值的类型，有点绕，我们来这样理解：</p>\n<p>如果一个函数中是一个死循环，那么这个函数会返回东西吗？不会，那么写void类型或者其他类型作为返回值类型都不合适，我们就可以使用never类型。</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c583079f345e8d038d2564.jpg\"></p>\n<p>如果一个函数是抛出一个异常，那么这个函数是不是也没有返回值呢？这个时候我们也可以使用never类型。</p>\n<p><img src=\"https://pic.imgdb.cn/item/65c583639f345e8d038daf8c.jpg\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>学如逆水行舟，不进则退</p>\n<hr>\n<p>谢谢款待</p>\n<p><code>2023</code> <code>09</code> <code>08</code></p>\n","text":"前言学习如何在 TypeScript 中定义变量，以及 JavaScript 类型在 TypeScript 中的变化以及 TypeScript 中新增的类型。 ...","permalink":"/post/TypeScript【三】定义变量和数据类型","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript 入门","slug":"TypeScript-入门","count":4,"path":"api/tags/TypeScript-入门.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1. 声明变量方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E7%9A%84%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">1.1.  声明变量的格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">1.2. 声明变量的关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD\"><span class=\"toc-text\">1.3. 变量的类型推断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E5%A3%B0%E6%98%8E-name-%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">1.4. 声明 name 报错</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-console-log%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">1.5. console.log报错</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-JavaScript-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. JavaScript 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-number%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.1. number类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-boolean%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.2. boolean类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-string%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.3. string类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-array%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.4. array类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-object%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.5. object类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-symbol%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.6. symbol类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-null%E5%92%8Cundefined\"><span class=\"toc-text\">2.7. null和undefined</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-TypeScript-%E5%BC%95%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3. TypeScript 引入的数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-enum-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.1. enum 类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-1-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">3.1.1. 枚举的基本定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-2-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">3.1.2. 枚举类型的值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-tuple-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.2. tuple 类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-1-tuple%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.2.1. tuple的基本使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-1-tuple-%E5%92%8C%E6%95%B0%E7%BB%84%E7%B1%BB%E6%AF%94\"><span class=\"toc-text\">3.2.1. tuple 和数组类比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-any%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.3. any类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-void%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.4. void类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-never%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.5. never类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li></ol>","author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"TypeScript【四】接口interface使用详解","uid":"efa903f91a28565d8dca46166c5eaa96","slug":"TypeScript【四】接口interface使用详解","date":"2023-09-09T04:30:47.000Z","updated":"2024-02-22T04:36:28.160Z","comments":true,"path":"api/articles/TypeScript【四】接口interface使用详解.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c5af439f345e8d03dbbd4f.jpg","text":"前言接口是TypeScript中一个非常重要的概念，在其他很多语言中已经有了并且被大量使用。 1. 为什么要使用接口1.1. JavaScript存在的问题我们...","permalink":"/post/TypeScript【四】接口interface使用详解","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript 入门","slug":"TypeScript-入门","count":4,"path":"api/tags/TypeScript-入门.json"}],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}}},"next_post":{"title":"TypeScript【二】使用Webpack搭建环境","uid":"8341e59134e12dac24934a69216cde75","slug":"TypeScript【二】使用Webpack搭建环境","date":"2023-09-07T03:12:26.000Z","updated":"2024-02-09T04:51:42.901Z","comments":true,"path":"api/articles/TypeScript【二】使用Webpack搭建环境.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c5af439f345e8d03dbbd4f.jpg","text":"前言学习任何的开发，我们都需要对应的环境：包括TypeScript的编译环境和开发工具。 我们就来完成它们的搭建，后续就可以愉快的来写TypeScript代码了...","permalink":"/post/TypeScript【二】使用Webpack搭建环境","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript 入门","slug":"TypeScript-入门","count":4,"path":"api/tags/TypeScript-入门.json"}],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}}}}