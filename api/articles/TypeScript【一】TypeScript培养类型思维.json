{"title":"TypeScript【一】TypeScript培养类型思维","uid":"fe45d9911f5fa4623963bc931676390e","slug":"TypeScript【一】TypeScript培养类型思维","date":"2023-09-06T04:00:00.000Z","updated":"2024-02-09T04:51:36.348Z","comments":true,"path":"api/articles/TypeScript【一】TypeScript培养类型思维.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c5af439f345e8d03dbbd4f.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p> 当你点开这篇文章时，我相信你已经在很多地方都已经听说过或者见过 <code>TypeScript</code> 了。</p>\n<p> 但是可能对 <code>TypeScript</code> 依然有很多问号：<code>TypeScript</code> 到底是什么？</p>\n<p> 为什么每个人都在说 <code>TypeScript</code> 怎么怎么好，到底好在哪里？</p>\n<p> <code>Angular</code>、<code>Vue3</code> 接连使用 <code>TypeScript</code> 进行了重构是否意味着我们必须掌握 <code>TypeScript</code>，它们又为什么要选择<code>TypeScript</code> ？</p>\n<p> 我需要什么样的基础才能学会或者说学好<code>TypeScript呢？</code>没有关系，在这个章节中我们就来解答上面的疑惑，并且我希望大家学完这个章节可以对一个概念有深入的理解，就是 <strong>类型思维</strong>。</p>\n<p> 不着急，下面就让我们和<code>TypeScript</code>有一场美丽的邂逅。</p>\n<h2 id=\"1-JavaScript-的痛点\"><a href=\"#1-JavaScript-的痛点\" class=\"headerlink\" title=\"1. JavaScript 的痛点\"></a>1. JavaScript 的痛点</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我始终坚信：任何新技术的出现都是为了解决之前某个技术的痛点。</p></blockquote>\n<h3 id=\"1-1-优秀的JavaScript\"><a href=\"#1-1-优秀的JavaScript\" class=\"headerlink\" title=\"1.1. 优秀的JavaScript\"></a>1.1. 优秀的JavaScript</h3><p>JavaScript是一门优秀的编程语言吗？</p>\n<p>每个人可能观点并不完全一致，但是从很多角度来看，JavaScript是一门非常优秀的编程语言。</p>\n<p>而且，可以说在很长一段时间内这个语言不会被代替，并且会在更多的领域被大家广泛使用。</p>\n<p>著名的Atwood定律是什么？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>any application that can be written in JavaScript, will eventually be written in JavaScript.</p>\n<p>“任何可以使用JavaScript来实现的应用都最终都会使用JavaScript实现。”</p></blockquote>\n<p>Stack Overflow的创立者之一的 <strong>Jeff Atwood</strong> 在2007年提出了著名的 <strong>Atwood定律</strong>。</p>\n<p>其实我们已经看到了，至少目前JavaScript在浏览器端依然无可替代，并且在服务端（Nodejs）也在被广泛的应用。</p>\n<p>优秀的JavaScript没有缺点吗？</p>\n<ul>\n<li><p>其实上由于各种历史因素，JavaScript语言本身存在很多的缺点；</p>\n</li>\n<li><p>比如ES5以及之前的使用的var关键字关于作用域的问题；</p>\n</li>\n<li><p>比如最初JavaScript设计的数组类型并不是<code>连续的内存空间</code>；</p>\n</li>\n<li><p>比如直到今天JavaScript也没有加入类型检测这一机制；</p>\n</li>\n</ul>\n<p>JavaScript正在慢慢变好吗？</p>\n<ul>\n<li><p>不可否认的是，JavaScript正在慢慢变得越来越好，无论是从底层设计还是应用层面。</p>\n</li>\n<li><p>ES6、7、8等的推出，每次都会让这门语言更加现代、更加安全、更加方便。</p>\n</li>\n<li><p>但是知道今天，JavaScript在类型检测上依然是毫无进展。</p>\n</li>\n</ul>\n<h3 id=\"1-2-类型引发的问题\"><a href=\"#1-2-类型引发的问题\" class=\"headerlink\" title=\"1.2. 类型引发的问题\"></a>1.2. 类型引发的问题</h3><p>首先你需要知道，编程开发中我们有一个共识：<strong>错误出现的越早越好</strong></p>\n<ul>\n<li><p>能在<strong>写代码的时候</strong>发现错误，就不要在<strong>代码编译时</strong>再发现（IDE的优势就是在代码编写过程中帮助我们发现错误）。</p>\n</li>\n<li><p>能在<strong>代码编译期间</strong>发现错误，就不要在<strong>代码运行期间</strong>再发现（类型检测就可以很好的帮助我们做到这一点）。</p>\n</li>\n<li><p>能在开发阶段发现错误，就不要在测试期间发现错误，能在测试期间发现错误，就不要在上线后发现错误。</p>\n</li>\n</ul>\n<p>现在我们想探究的就是如何在 <strong>代码编译期间</strong> 发现代码的错误</p>\n<p>JavaScript可以做到吗？不可以，我们来看下面这段经常可能出现的代码问题。</p>\n<div class=\"language-javascript\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">javascript</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">function</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">getLength</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">str</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #505153\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC\">return</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">str</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #CCCCCC\">length</span></span>\n<span class=\"line\"><span style=\"color: #505153\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">1.正在代码执行</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">)</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">2.开始函数</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">)</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getLength</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">abc</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">)</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">getLength</span><span style=\"color: #505153\">()</span></span>\n<span class=\"line\"><span style=\"color: #61D0FF\">console</span><span style=\"color: #DA67DA\">.</span><span style=\"color: #9569EC\">log</span><span style=\"color: #505153\">(</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #CCCCCC\">3.调用结束</span><span style=\"color: #505153\">&quot;</span><span style=\"color: #505153\">)</span></span></code></pre></div><div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #9569EC\">-----</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">控制台</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">-----</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">1.正在代码执行</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">2.开始函数</span></span>\n<span class=\"line\"><span style=\"color: #9569EC\">TypeError:</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">Cannot</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">read</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">properties</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">of</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #CCCCCC\">undefined</span><span style=\"color: #CCCCCC\"> (reading </span><span style=\"color: #505153\">&#39;</span><span style=\"color: #CCCCCC\">length</span><span style=\"color: #505153\">&#39;</span><span style=\"color: #CCCCCC\">)</span></span></code></pre></div><p>如上是我们一个非常常见的错误：</p>\n<ul>\n<li><p>这个错误很大的原因就是因为JavaScript没有对我们传入的参数进行任何的限制，只能等到运行期间才发现这个错误。</p>\n</li>\n<li><p>并且当这个错误产生时，会影响后续代码的继续执行，也就是整个项目都因为一个小小的错误而陷入崩溃。</p>\n</li>\n</ul>\n<p>当然，你可能会想：我怎么可能犯这样低级的错误呢？</p>\n<ul>\n<li><p>当我们写像我们上面这样的简单的demo时，这样的错误很容易避免，并且当出现错误时，也很容易检查出来。</p>\n</li>\n<li><p>但是当我们开发一个大型项目时呢？你能保证自己一定不会出现这样的问题吗？而且如果我们是调用别人的类库，又如何知道让我们传入的到底是什么样的参数呢？</p>\n</li>\n</ul>\n<p>但是，如果我们可以给JavaScript加上很多限制，在开发中就可以很好的避免这样的问题了：</p>\n<ul>\n<li><p>比如我们的getLength函数中str是一个必传的类型，没有调用者没有传编译期间就会报错。</p>\n</li>\n<li><p>比如我们要求它的必须是一个String类型，传入其他类型就直接报错。</p>\n</li>\n<li><p>那么就可以知道很多的错误问题在编译期间就被发现，而不是等到运行时再去发现和修改。</p>\n</li>\n</ul>\n<h3 id=\"1-3-类型思维的缺失\"><a href=\"#1-3-类型思维的缺失\" class=\"headerlink\" title=\"1.3. 类型思维的缺失\"></a>1.3. 类型思维的缺失</h3><p>我们已经简单体会到没有类型检查带来的一些问题，JavaScript因为从设计之初就没有考虑类型的约束问题，所以造成了前端开发人员关于<strong>类型思维的缺失</strong>：</p>\n<ul>\n<li><p><strong>前端开发人员</strong>通常不关心变量或者参数是什么类型的，如果在必须确定类型时，我们往往需要使用各种判断验证。</p>\n</li>\n<li><p>从其他方向转到前端的人员，也会因为没有类型约束，而总是担心自己的代码不安全，不够健壮。</p>\n</li>\n</ul>\n<p>所以我们经常会说JavaScript<strong>不适合开发大型项目</strong>，因为当项目一旦庞大起来，这种宽松的类型约束会带来非常多的安全隐患，多人员开发它们之间也没有<strong>良好的类型契约</strong>：</p>\n<ul>\n<li><p>比如当我们去实现一个核心类库时，如果没有类型约束，那么需要对别人传入的参数进行各种验证来保证我们代码的健壮性。</p>\n</li>\n<li><p>比如我们去调用别人的函数，对方没有对函数进行任何的注释，我们只能去看里面的逻辑来理解这个函数需要传入什么参数，返回值是什么类型。</p>\n</li>\n</ul>\n<p>为了弥补JavaScript类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案：</p>\n<ul>\n<li><p>2014年，Facebook推出了flow来对JavaScript进行类型检查</p>\n</li>\n<li><p>同年，Microsoft微软也推出了TypeScript1.0版本</p>\n</li>\n<li><p>他们都致力于为JavaScript提供类型检查</p>\n</li>\n</ul>\n<p>而现在，无疑<strong>TypeScript已经完全胜出</strong>：</p>\n<ul>\n<li><p>Vue2.x的时候采用的就是flow来做类型检查。</p>\n</li>\n<li><p>Vue3.x已经全线转向TypeScript，98.3%使用TypeScript进行了重构。</p>\n</li>\n<li><p>而Angular在很早期就使用TypeScript进行了项目重构并且需要使用TypeScript来进行开发。</p>\n</li>\n<li><p>而甚至Facebook公司一些自己的产品也在使用TypeScript。</p>\n</li>\n</ul>\n<p>学习TypeScript不仅仅可以为我们的代码增加类型约束，而且可以培养我们前端程序员具备类型思维。</p>\n<h2 id=\"2-邂逅-TypeScript\"><a href=\"#2-邂逅-TypeScript\" class=\"headerlink\" title=\"2. 邂逅 TypeScript\"></a>2. 邂逅 TypeScript</h2><h3 id=\"2-1-什么是-TypeScript\"><a href=\"#2-1-什么是-TypeScript\" class=\"headerlink\" title=\"2.1. 什么是 TypeScript ?\"></a>2.1. 什么是 TypeScript ?</h3><p>虽然我们已经知道TypeScript是干什么的了，也知道它解决了什么样的问题，但是我们还是需要全面的来认识一下TypeScript到底是什么？</p>\n<details class=\"custom-details\">\n<summary>TypeScript 在 GitHub 和官方上对自己的定义</summary>\n<ul>\n<li>GitHub说法：</li>\n</ul>\n<p>TypeScript is a superset of JavaScript that compiles to clean JavaScript output.  </p>\n<ul>\n<li>TypeScript官网：</li>\n</ul>\n<p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.  </p>\n<p>翻译一下：TypeScript是拥有类型的JavaScript超集，它可以编译成普通、干净、完整的JavaScript代码。</p>\n\n</details>\n<hr>\n<p>怎么理解上面的话呢？</p>\n<p>我们可以将TypeScript理解成加强版的JavaScript。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki Aurora Future\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #cccccc\">JavaScript所拥有的特性，TypeScript全部都是支持的，并且它紧随ECMAScript的标准，所以ES6、ES7、ES8等新语法标准，它都是支持的。</span></span>\n<span class=\"line\"><span style=\"color: #cccccc\"></span></span>\n<span class=\"line\"><span style=\"color: #cccccc\">并且在语言层面上，不仅仅增加了类型约束，而且包括一些语法的扩展，比如枚举类型（Enum）、元组类型（Tuple）等。</span></span>\n<span class=\"line\"><span style=\"color: #cccccc\"></span></span>\n<span class=\"line\"><span style=\"color: #cccccc\">TypeScript在实现新特性的同时，总是保持和ES标准的同步甚至是领先。</span></span>\n<span class=\"line\"><span style=\"color: #cccccc\"></span></span>\n<span class=\"line\"><span style=\"color: #cccccc\">并且TypeScript最终会被编译成JavaScript代码，所以你并不需要担心它的兼容性问题，在编译时也不需要借助于Babel这样的工具。</span></span></code></pre></div><p>所以，我们可以把TypeScript理解成一身神装的JavaScript，不仅让JavaScript更加安全，而且给它带来了诸多好用的装备特效。</p>\n<p>官方对TypeScript有几段特点的描述，我觉得非常到位（虽然有些官方，了解一下），我们一起来分享一下：</p>\n<p>始于JavaScript，归于JavaScript</p>\n<ul>\n<li><p>TypeScript从今天数以百万计的JavaScript开发者所熟悉的语法和语义开始。使用现有的JavaScript代码，包括流行的JavaScript库，并从JavaScript代码中调用TypeScript代码。</p>\n</li>\n<li><p>TypeScript可以编译出纯净、 简洁的JavaScript代码，并且可以运行在任何浏览器上、Node.js环境中和任何支持ECMAScript 3（或更高版本）的JavaScript引擎中。</p>\n</li>\n</ul>\n<p>TypeScript是一个强大的工具，用于构建大型项目</p>\n<ul>\n<li><p>类型允许JavaScript开发者在开发JavaScript应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。</p>\n</li>\n<li><p>类型是可选的，类型推断让一些类型的注释使你的代码的静态验证有很大的不同。类型让你定义软件组件之间的接口和洞察现有JavaScript库的行为。</p>\n</li>\n</ul>\n<p>拥有先进的 JavaScript</p>\n<ul>\n<li><p>TypeScript提供最新的和不断发展的JavaScript特性，包括那些来自2015年的ECMAScript和未来的提案中的特性，比如异步功能和Decorators，以帮助建立健壮的组件。</p>\n</li>\n<li><p>这些特性为高可信应用程序开发时是可用的，但是会被编译成简洁的ECMAScript3（或更新版本）的JavaScript。</p>\n</li>\n</ul>\n<p>正是因为有这些特性，TypeScript目前已经在很多地方被应用：</p>\n<ul>\n<li>包括我们前面提到的Vue3和Angular已经使用TypeScript进行重构</li>\n<li>包括Vue3以后的开发模式必然会和TypeScript更加切合，大家也更多的需要使用TypeScript来编写代码</li>\n<li>包括目前已经变成最流行的编辑器VSCode也是使用TypeScript来完成的</li>\n<li>包括在React中已经使用的ant-design的UI库，也大量使用TypeScript来编写</li>\n<li>包括小程序开发，也是支持TypeScript的</li>\n</ul>\n<h2 id=\"3-前端学不动系列\"><a href=\"#3-前端学不动系列\" class=\"headerlink\" title=\"3. 前端学不动系列\"></a>3. 前端学不动系列</h2><h3 id=\"3-1-前端开发者的难\"><a href=\"#3-1-前端开发者的难\" class=\"headerlink\" title=\"3.1. 前端开发者的难\"></a>3.1. 前端开发者的难</h3><p>大前端是一群最能或者说最需要折腾的开发者：</p>\n<ul>\n<li><p><code>客户端开发者</code>：从Android到iOS，或者从iOS到Android，到RN，甚至现在越来越多的客户端开发者接触前端相关知识（Vue、React、Angular、小程序）</p>\n</li>\n<li><p><code>前端开发者</code>：从jQuery到AngularJS，到三大框架并行：Vue、React、Angular，还有小程序，甚至现在也要接触客户端开发（比如RN、Flutter）</p>\n</li>\n<li><p>目前又面临着不仅仅学习ES的特性，还要学习TypeScript</p>\n</li>\n<li><p>Vue3马上也会到来，又必须学习Vue3新特性</p>\n</li>\n</ul>\n<p>大前端开发就是，不像服务器一样可能几年甚至几十年还是那一套的东西。前端新技术会层出不穷。</p>\n<p><strong>但是每一样技术的出现都会让惊喜，因为他必然是解决了之前技术的某一个痛点的，而TypeScript真是解决了JavaScript存在的很多设计缺陷，尤其是关于类型检测的。</strong></p>\n<p>并且从开发者长远的角度来看，学习TypeScript有助于我们前端程序员培养 <strong>类型思维</strong>，这种思维方式对于完成大型项目尤为重要。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>学如逆水行舟，不进则退。</p>\n<hr>\n<p>谢谢款待</p>\n<p><code>2023</code> <code>09</code> <code>06</code></p>\n","text":"前言 当你点开这篇文章时，我相信你已经在很多地方都已经听说过或者见过 TypeScript 了。 但是可能对 TypeScript 依然有很多问号：TypeSc...","permalink":"/post/TypeScript【一】TypeScript培养类型思维","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript 入门","slug":"TypeScript-入门","count":4,"path":"api/tags/TypeScript-入门.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-JavaScript-%E7%9A%84%E7%97%9B%E7%82%B9\"><span class=\"toc-text\">1. JavaScript 的痛点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%BC%98%E7%A7%80%E7%9A%84JavaScript\"><span class=\"toc-text\">1.1. 优秀的JavaScript</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E7%B1%BB%E5%9E%8B%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.2. 类型引发的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E7%B1%BB%E5%9E%8B%E6%80%9D%E7%BB%B4%E7%9A%84%E7%BC%BA%E5%A4%B1\"><span class=\"toc-text\">1.3. 类型思维的缺失</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E9%82%82%E9%80%85-TypeScript\"><span class=\"toc-text\">2. 邂逅 TypeScript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E4%BB%80%E4%B9%88%E6%98%AF-TypeScript\"><span class=\"toc-text\">2.1. 什么是 TypeScript ?</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B8%8D%E5%8A%A8%E7%B3%BB%E5%88%97\"><span class=\"toc-text\">3. 前端学不动系列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E9%9A%BE\"><span class=\"toc-text\">3.1. 前端开发者的难</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li></ol>","author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"TypeScript【二】使用Webpack搭建环境","uid":"8341e59134e12dac24934a69216cde75","slug":"TypeScript【二】使用Webpack搭建环境","date":"2023-09-07T03:12:26.000Z","updated":"2024-02-09T04:51:42.901Z","comments":true,"path":"api/articles/TypeScript【二】使用Webpack搭建环境.json","keywords":null,"cover":"https://pic.imgdb.cn/item/65c5af439f345e8d03dbbd4f.jpg","text":"前言学习任何的开发，我们都需要对应的环境：包括TypeScript的编译环境和开发工具。 我们就来完成它们的搭建，后续就可以愉快的来写TypeScript代码了...","permalink":"/post/TypeScript【二】使用Webpack搭建环境","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript 入门","slug":"TypeScript-入门","count":4,"path":"api/tags/TypeScript-入门.json"}],"author":{"name":"一小池勺","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65c339bd9f345e8d03bb301d.jpg","link":"/","description":"不要感受路，要赶路","socials":{"github":"https://gitee.com/zrblue","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3318213455","zhihu":"","csdn":"https://blog.csdn.net/zrblue?type=blog","juejin":"https://juejin.cn","customs":{}}}},"next_post":{}}