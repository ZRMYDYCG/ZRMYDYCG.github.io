[{"id":"3c17796e3b5f0a52e940306898f373b9","title":"细读Vue官方文档","content":"① 认识 Vue.jsVue (读音 /vjuː/ ) 是一套用于构建用户界面的渐进式框架。\n那么，什么是渐进式框架呢 ？\n渐进式框架：表示咱们可以在项目中一点点来引入和使用 Vue，而不一定需要全部使用Vue来开发整个项目。这就像是在一顿丰盛的饭菜中慢慢加入一点点的调味料，让整个项目变得更美味，而不是突然一下子把整块火锅底料倒进锅里，然后炒红、炒化、炒出红油！\n② Vue的引入方式Vue是一个JavaScript库，它提供了一系列封装完善的功能，在一开学习的时候，咱们去复杂化，无需进行工程化的操作，只需将其引入项目中即可使用。\n那么安装和使用Vue这个JavaScript库有哪些方式呢？\n\n通过 CDN 的方式来引入\n下载 Vue 的 JavaScript 文件，手动引入\n通过 npm包管理工具 安装使用它【webpack之后会用到】\n直接通过 Vue CLI 创建项目\n\n2.1 CDN 引入CDN 是指“Content Distribution Network”（内容分发网络），它是一种将网站的内容分发到全球各个节点，以提高访问速度和用户体验的神奇网络技术。\n\n全球节点：CDN 将网站的内容存储在全球各个节点上，就像在全城放置了许多比萨店一样。这样，当人们想要访问你的网站时，就可以从离他们最近的节点获取内容，省去了长途跋涉的时间。就像是从临近的比萨店点餐，比等待从另一个城市运过来要快速得多。这样一来，用户不仅能更快地获取网站内容，还能把时间花在更重要的事情上，比如品尝比萨。\n\n提高访问速度：由于内容存储在全球各个节点上，CDN 可以选择离用户最近的节点来提供内容，从而大大减少了网络延迟。这就好比你和室友们一起享受比萨，每个人都能迅速得到自己的那一份，不用再等待太久。所以，CDN 就是你室友分发比萨的快递员，为用户提供了快速而高效的访问体验。\n\n提高用户体验：CDN 不仅提供快速的访问速度，还可以帮助网站处理大量的访问请求。如果网站无法处理大量的访问请求，就好像是室友在分发比萨时被包围了一样，这会导致用户等待时间过长，甚至无法访问。所以，而 CDN 可以为你分发比萨，并且确保每个人都能快乐地享用。\n\n\n2.2 常用的CDN服务器\n自己的CDN服务器：阿里、腾讯、亚马逊、Google等都可以购买CDN服务器\n开源的CDN服务器：国际上使用比较多的是unpkg、JSDelivr、cdnjs\n\n2.3 Vue 的 CDN 引入\ntxt注意：后期咱们所有的代码的 `CDN` 引入的都是 `Vue 3`，`Vue 3` 是支持 `Vue 2` 的 ，有一点不同就是 `Vue 3` 中不再支持 `Vue 2` 的挂载方式了。在 `Vue 3` 中，需要使用 `createApp` 方法来创建 `Vue` 实例，并使用 `mount` 方法将其挂载到指定的元素上 🐶\n\nVue 2\njs&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;&gt;&lt;/script&gt;Vue 3\nbash&lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;来看看两种不同的挂载方式\n\nVue 2 的挂载方式\n\nbash&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Vue 2 挂载方式示例&lt;/title&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        new Vue(&#123;\n            el: &#39;#app&#39;,\n            data: &#123;\n                message: &#39;Hello, Vue 2!&#39;\n            &#125;\n        &#125;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nVue 3 的挂载方式\n\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Vue 3 挂载方式示例&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const app = Vue.createApp(&#123;\n            data() &#123;\n                return &#123;\n                    message: &#39;Hello, Vue 3!&#39;\n                &#125;\n            &#125;\n        &#125;);\n\n        app.mount(&#39;#app&#39;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;③ 声明式和命令式的区分3.1 命令式每完成一个操作，都需要通过JavaScript编写一条代码，来给浏览器一个指令，这样的编写代码的过程，我们称之为命令式编程：\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;计数器&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;h2 id=&quot;counter&quot;&gt;&lt;/h2&gt;\n        &lt;button id=&quot;addBtn&quot;&gt;+1&lt;/button&gt;\n        &lt;button id=&quot;decBtn&quot;&gt;-1&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const counterElement = document.getElementById(&#39;counter&#39;)\n        const addBtn = document.getElementById(&#39;addBtn&#39;)\n        const decBtn = document.getElementById(&#39;decBtn&#39;)\n\n        let counter = 0\n\n        const updateCounter = () =&gt; &#123;\n            counterElement.textContent = counter\n        &#125;\n\n        const add = () =&gt; &#123;\n            counter++\n            updateCounter()\n        &#125;\n\n        const dec = () =&gt; &#123;\n            counter--\n            updateCounter()\n        &#125;\n\n        addBtn.addEventListener(&#39;click&#39;, add)\n        decBtn.addEventListener(&#39;click&#39;, dec)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;3.2 声明式在createApp传入的对象中声明需要的内容，模板template、数据data、方法methods，这样的编写代码的过程，我们称之为是声明式编程。\n3.2.1 声明式之 Options APIhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;计数器&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n      const App = &#123;\n        template: `\n          &lt;div&gt;\n            &lt;h2&gt;&#123;&#123;counter&#125;&#125;&lt;/h2&gt;\n            &lt;button @click=&#39;add&#39;&gt;+1&lt;/button&gt;\n            &lt;button @click=&#39;dec&#39;&gt;-1&lt;/button&gt;\n          &lt;/div&gt;\n        `,\n        data() &#123;\n          return &#123;\n            counter: 0\n          &#125;\n        &#125;,\n        methods: &#123;\n          add() &#123;\n            this.counter++\n          &#125;,\n          dec() &#123;\n            this.counter--\n          &#125;\n        &#125;\n      &#125;\n\n      Vue.createApp(App).mount(&#39;#app&#39;)\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;3.2.2 声明式之 Composable APIhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;计数器&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n      const App = &#123;\n        template: `\n          &lt;div&gt;\n            &lt;h2&gt;&#123;&#123; counter &#125;&#125;&lt;/h2&gt;\n            &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;\n            &lt;button @click=&quot;dec&quot;&gt;-1&lt;/button&gt;\n          &lt;/div&gt;\n        `,\n        setup() &#123;\n          const counter = Vue.ref(0);\n\n          const add = () =&gt; &#123;\n            counter.value++;\n          &#125;\n\n          const dec = () =&gt; &#123;\n            counter.value--;\n          &#125;\n\n          return &#123;\n            counter,\n            add,\n            dec\n          &#125;\n        &#125;\n      &#125;\n\n      Vue.createApp(App).mount(&#39;#app&#39;)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;④ MVVM 开发模式我们也经常称Vue是一个MVVM的框架。\n4.1 什么是 MVVM 呢 ？MVVM是一种软件的体系结构，是Model-View-ViewModel的简称\n\n4.2 Vue 中的 MVVMVue虽然并没有完全遵守MVVM的模型，但是整个设计是受到它的启发的：\n\n⑤ createApp 传入对像部分参数详解如上咱们在使用 createApp 的时候，传入了一个对象，那么其传入的属性的含义是什么呢？\n5.1 template 属性template表示的是Vue需要帮助我们渲染的模板信息：\n\n它里面有很多的HTML标签，这些标签会替换掉我们挂载到的元素。\n5.2 data 属性data 属性是传入一个函数，并且该函数需要返回一个对象，data 中返回的对象会被 Vue的响应式系统劫持，之后对该对象的修改或者访问都会在劫持中被处理。\n\nVue2.x的时候，也可以传入一个对象（官方推荐是一个函数）\nVue3.x的时候，需要传入一个函数，否则就会直接在浏览器中报错\n\n5.3 methods属性methods 属性是一个对象，通常我们会在这个对象中定义很多的方法，这些方法可以被绑定到 template 模板中，在方法中可以使用 this 关键字来直接访问到 data 中返回的对象的属性\n⑥ methods 中 的this6.1 为什么 methods 中不可以使用箭头函数 ？在 methods 中要使用 data 返回对象中的数据，那么这个 this 是必须有值的，并且应该可以通过 this 获取到 data 返回对象中的数据。\n如果 methods 使用了箭头函数，那其 this 指向会是谁呢 ？\n指向 window，而 window 中我们无法获取到 data 返回对象中的数据。\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Vue 3 挂载方式示例&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;\n        &lt;button @click=&quot;add&quot;&gt;箭头函数&lt;/button&gt;\n        &lt;button @click=&quot;dec&quot;&gt;非箭头函数&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const app = Vue.createApp(&#123;\n            data() &#123;\n                return &#123;\n                    message: &#39;Hello, Vue 3!&#39;\n                &#125;\n            &#125;,\n            methods: &#123;\n                add: () =&gt; &#123;\n                    console.log(this)\n                &#125;,\n                dec() &#123;\n                    console.log(this)\n                &#125;\n            &#125;\n        &#125;)\n        app.mount(&#39;#app&#39;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n6.2 为什么是window呢？涉及到箭头函数使用 this 的查找规则，它会在自己的上层作用域中来查找 this，最终刚好找到的是 script 作用域中的 this ，所以就是 window。\n⑦ 模板语法7.1 前言\ntxtVue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。当然，如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染 (render) 函数，使用可选的 JSX 语法。但请注意，这将不会享受到和模板同等级别的编译时优化。\n7.2 插值语法7.2.1 mustache 语法如果我们希望把数据显示到模板 （template） 中，使用最多的语法是  “Mustache” 语法 (双大括号) 的文本插值：\nhtml&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;data 返回的对象是有添加到 Vue 的响应式系统中，当 data 中的数据发生改变时，对应的内容也会发生更新。\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;&#123;&#123;  &#125;&#125;&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;h2&gt;&#123;&#123; numberObj &#125;&#125;&lt;/h2&gt;\n        &lt;button @click=&quot;change&quot;&gt;BUTTON&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const app = Vue.createApp(&#123;\n            data() &#123;\n                return &#123;\n                    numberObj: &#123;\n                        a: 1,\n                        b: 2,\n                    &#125;\n                &#125;\n            &#125;,\n            methods: &#123;\n                change() &#123;\n                    this.numberObj.a = 2\n                &#125;\n            &#125;\n        &#125;)\n\n        app.mount(&#39;#app&#39;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;Mustache 中不仅仅可以是 data 中的属性，也可以是单个JavaScript 的表达式：\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;&#123;&#123; js 表达式 &#125;&#125;&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n    &lt;template id=&quot;my-app&quot;&gt;\n      &lt;div&gt;\n        &lt;h2&gt;&#123;&#123; counter * 2&#125;&#125;&lt;/h2&gt;\n        &lt;h2&gt;&#123;&#123; counter + 1 &#125;&#125;&lt;/h2&gt;\n        &lt;h2&gt;&#123;&#123;message.split(\" \").reverse().join(\" \")&#125;&#125;&lt;/h2&gt;\n        &lt;h2&gt;&#123;&#123;reverse(message)&#125;&#125;&lt;/h2&gt;\n        &lt;h2&gt;&#123;&#123; a > b ? '1' : '2'&#125;&#125;&lt;/h2&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n\n    &lt;script&gt;\n      const App = &#123;\n        template: &#39;#my-app&#39;,\n        data() &#123;\n          return &#123;\n            message: &quot;Welcome to vue&quot;,\n            counter: 10,\n            a: 1,\n            b: 2\n          &#125;\n        &#125;,\n        methods: &#123;\n          reverse(msg) &#123;\n            return msg.split(&quot; &quot;).reverse().join(&quot; &quot;)\n          &#125;\n        &#125;\n      &#125;\n\n      // 创建应用程序, 并且挂载\n      Vue.createApp(App).mount(&#39;#app&#39;);\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;但如下是错误的：\nhtml&lt;!-- 这是一个赋值语句, 不是表达式 --&gt;\n&lt;h2&gt;&#123;&#123;var name = \"Hello\"&#125;&#125;&lt;/h2&gt;\n&lt;!-- 控制流的if语句也是不支持的, 可以使用三元运算符 --&gt;\n&lt;h2&gt;&#123;&#123; if (true) &#123; return message &#125; &#125;&#125;&lt;/h2&gt;7.3 指令7.3.1 v-once参考\n只渲染元素和组件一次。随后的重新渲染，元素 &#x2F; 组件 及其 所有的子节点 将被视为静态内容并跳过。这可以用于优化更新性能。\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;v-once&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;!-- 单个元素 --&gt;\n        &lt;span v-once&gt;This will never change: &#123;&#123; msg &#125;&#125;&lt;/span&gt;\n        &lt;!-- 有子元素 --&gt;\n        &lt;div&gt;\n            &lt;h1&gt;comment&lt;/h1&gt;\n            &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;!-- 组件 --&gt;\n        &lt;my-comment v-once :comment=&quot;msg&quot;&gt;&lt;/my-comment&gt;\n        &lt;!-- v-for 指令 --&gt;\n        &lt;ul&gt;\n            &lt;li v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;!-- 按钮改变 msg 属性的值 --&gt;\n        &lt;button @click=&quot;changeMsg&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        // 创建 my-comment 组件\n        const MyComment = &#123;\n            props: [&#39;comment&#39;],\n            template: &#39;&lt;div&gt;&lt;h2&gt;My Comment:&lt;/h2&gt;&lt;p&gt;&#123;&#123; comment &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#39;\n        &#125;;\n\n        const app = Vue.createApp(&#123;\n            data() &#123;\n                return &#123;\n                    title: &#39;Vue Demo&#39;,\n                    msg: &#39;Hello Vue&#39;,\n                    list: [&#39;张三&#39;, &#39;王二&#39;, &#39;李四&#39;, &#39;麻子&#39;, &#39;刘德华&#39; , &#39;蔡徐坤&#39;]\n                &#125;\n            &#125;,\n            methods: &#123;\n                changeMsg() &#123;\n                    this.msg = &#39;Bye Vue&#39;\n                &#125;\n            &#125;,\n            components: &#123;\n                &#39;my-comment&#39;: MyComment\n            &#125;\n        &#125;);\n\n        app.mount(&#39;#app&#39;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;那这个指令可以在项目中怎么来使用呢 ？\n通过 v-once 创建低开销的静态组件\n\n7.3.2 v-text参考\n更新元素的 textContent。如果要更新部分的 textContent，需要使用 &#123;&#123; Mustache &#125;&#125; 插值。\nhtml&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;\n&lt;!-- 等价于 --&gt;\n&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;7.3.3 v-html参考\n默认情况下，如果我们展示的内容本身是 html 的，那么 vue 并不会对其进行特殊的解析。但如果我们希望这个内容被 Vue 可以解析出来，但是其会忽略属性的绑定：\nhtml&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n    &lt;template id=&quot;my-app&quot;&gt;\n      &lt;div v-html=&#39;info&#39;&gt;&lt;/div&gt;\n      &lt;div v-bind:pro=&quot;pro&quot;&gt;&lt;/div&gt;\n    &lt;/template&gt;\n\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n      const App = &#123;\n        template: &#39;#my-app&#39;,\n        data() &#123;\n          return &#123;\n            pro: &quot;name&quot;,\n            info: `&lt;span style=&#39;color: red; font-size: 30px&#39; v-bind:pro=&quot;pro&quot;&gt;哈哈哈&lt;/span&gt;`\n          &#125;\n        &#125;\n      &#125;\n\n      Vue.createApp(App).mount(&#39;#app&#39;);\n    &lt;/script&gt;\n &lt;/body&gt;\n7.3.4 v-prev-pre用于跳过元素和它的子元素的编译过程，显示原始的Mustache标签，其用于跳过不需要编译的节点：\nhtml&lt;div v-pre&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;7.3.5 v-cloakv-cloak 指令用于在 Vue 应用程序加载和编译之前隐藏未编译的 Mustache 标签，以防止在加载过程中显示出未渲染的模板。\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;v-cloak&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n    &lt;style&gt;\n        [v-cloak] &#123;\n            display: none;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot; v-cloak&gt;\n        &#123;&#123; message &#125;&#125;\n    &lt;/div&gt;\n    &lt;script&gt;\n    const app = Vue.createApp(&#123;\n        data() &#123;\n            return &#123;\n            message: &#39;Hello, Vue!&#39;\n            &#125;\n        &#125;\n        &#125;)\n\n    app.mount(&#39;#app&#39;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;如上，在 &lt;div id=&quot;app&quot; v-cloak&gt; 元素上使用了 v-cloak 指令，这意味着在 Vue 应用程序加载和编译之前，该元素的内容将被隐藏起来。\n当 Vue 应用程序加载和编译完成后，v-cloak 指令会被移除，&#123;&#123; message &#125;&#125; 的内容将显示出来。\n7.3.6 v-bind元素除了内容之外还会有各种各样的属性，绑定属性我们使用 v-bind。\n\n缩写：:\n预期：any (with argument) | Object (without argument)\n修饰符：.camel - 将 kebab-case attribute 名转换为 camelCase。html&lt;div :data-my-attribute.camel=&quot;value&quot;&gt;&lt;/div&gt;\n\n7.3.6.1 绑定基本属性很多时候，不光元素的 innerHTML 是动态的，元素的属性也是动态的：\na 元素的 href 属性、img 的 src 属性 …\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;v-bind&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;template id=&quot;my-app&quot;&gt;\n        &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n        &lt;img v-bind:src=&quot;picUrl&quot; alt=&quot;&quot;&gt;\n        &lt;!-- 语法糖 --&gt;\n        &lt;img :src=&quot;picUrl&quot;&gt;\n        &lt;a :href=&quot;targetUrl&quot;&gt;&lt;/a&gt;\n    &lt;/template&gt;\n    &lt;script&gt;\n    const app = &#123;\n        template: &quot;#my-app&quot;,\n        data() &#123;\n            return &#123;\n                message: &quot;Hello Vue&quot;,\n                picUrl: &quot;www.xxx.com&quot;,\n                targetUrl: &quot;www.baidu.com&quot;\n            &#125;\n        &#125;\n    &#125;\n    Vue.createApp(app).mount(&#39;#app&#39;)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;7.3.6.2 绑定 class 属性对象语法可以传给 :class (v-bind:class 的简写) 一个对象，以动态地切换 class：\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;v-bind&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n    &lt;style&gt;\n        .first &#123;\n            font-size: 40px;\n        &#125;\n        .fontColor &#123;\n            color: red;\n        &#125;\n        .fontWeight &#123;\n            font-weight: 800;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;template id=&quot;my-app&quot;&gt;\n        &lt;!-- 普通的绑定方式 --&gt;\n        &lt;div :class=&quot;className&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n        &lt;!-- 对象绑定 --&gt;\n        &lt;!-- 动态决定 样式中写好的类是否加入 =&gt; &#123; 类(变量): boolean &#125; --&gt;\n        &lt;!-- &lt;div :class=&quot;&#123;&#39;fontColor&#39;: true, &#39;fontWeight&#39;: true&#125;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt; --&gt;\n        &lt;div class=&quot;first&quot; :class=&quot;&#123;&#39;fontColor&#39;: true, &#39;fontWeight&#39;: true&#125;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n        &lt;hr/&gt;\n        &lt;!-- 案例练习 --&gt;\n        &lt;div :class=&quot;&#123;&#39;fontColor&#39;: isActive&#125;&quot;&gt;今天没有下雪&lt;/div&gt;\n        &lt;!-- 切换样式状态 --&gt;\n        &lt;button @click=&quot;Toggle&quot;&gt;切换样式&lt;/button&gt;\n        &lt;!-- 绑定对象 --&gt;\n        &lt;div :class=&quot;classObj&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n        &lt;!-- 从 methods 中获取 --&gt;\n        &lt;div :class=&quot;getClassObj()&quot;&gt;&lt;/div&gt;\n    &lt;/template&gt;\n    &lt;script&gt;\n    const app = &#123;\n        template: &quot;#my-app&quot;,\n        data() &#123;\n            return &#123;\n                message: &quot;今天下雪了&quot;,\n                className: &quot;fontColor&quot;,\n                isActive: false,\n                classObj: &#123;\n                    first: true,\n                    fontColor: false,\n                    fontWeight: true\n                &#125;\n            &#125;\n        &#125;,\n        methods: &#123;\n            Toggle() &#123;\n                this.isActive = !this.isActive\n            &#125;,\n            getClassObj() &#123;\n                return this.classObj\n            &#125;\n        &#125;\n    &#125;\n    Vue.createApp(app).mount(&#39;#app&#39;)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;数组语法可以把一个数组传给 :class，以应用一个 class 列表：\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;v-bind绑定class属性的数组写法&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n    &lt;style&gt;\n        .active &#123;\n            background-color: pink;\n        &#125;\n\n        .fontSize &#123;\n            font-size: 40px;\n        &#125;\n\n        .fontColor &#123;\n            color: red;\n        &#125;\n\n        .fontWeight &#123;\n            font-weight: 800;\n        &#125;\n\n        .green &#123;\n            color: green;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n    &lt;template id=&quot;my-app&quot;&gt;\n      &lt;div :class=&quot;[&#39;fontSize&#39;, isgreen]&quot;&gt;哈哈哈&lt;/div&gt;\n      &lt;div :class=&quot;[&#39;fontColor&#39;, isgreen, isActive ? &#39;active&#39;: &#39;&#39;]&quot;&gt;呵呵呵&lt;/div&gt;\n      &lt;div :class=&quot;[&#39;fontWeight&#39;, &#123; &#39;active&#39;: isActive &#125;]&quot;&gt;嘻嘻嘻&lt;/div&gt;\n    &lt;/template&gt;\n\n    &lt;script&gt;\n      const App = &#123;\n        template: &#39;#my-app&#39;,\n        data() &#123;\n          return &#123;\n            message: &quot;Hello World&quot;,\n            isgreen: &#39;green&#39;,\n            isActive: true\n          &#125;\n        &#125;\n      &#125;\n      Vue.createApp(App).mount(&#39;#app&#39;);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;7.3.6.3 绑定 style 属性对象语法:style  的对象语法十分直观——看着非常像 CSS ，但其实是一个 JavaScript 对象。\nCSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;template id=&quot;my-app&quot;&gt;\n        &lt;div :style=&quot;&#123;color: &#39;red&#39;, fontSize: &#39;30px&#39;, &#39;background-color&#39;: &#39;blue&#39;&#125;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n        &lt;div :style=&quot;&#123;color: &#39;red&#39;, fontSize: size + &#39;px&#39;, &#39;background-color&#39;: &#39;blue&#39;&#125;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n        &lt;div :style=&quot;styleObj&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n    &lt;/template&gt;\n    &lt;script&gt;\n    const App = &#123;\n        template: &#39;#my-app&#39;,\n        data() &#123;\n            return &#123;\n                message: &quot;GG Bone!&quot;,\n                size: 50,\n                styleObj: &#123;\n                    color: &#39;red&#39;,\n                    fontSize: &#39;50px&#39;,\n                    &#39;background-color&#39;: &#39;pink&#39;\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    Vue.createApp(App).mount(&#39;#app&#39;)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;数组语法:style 的数组语法可以将多个样式对象应用到同一个元素上\nhtml&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;template id=&quot;my-app&quot;&gt;\n        &lt;div :style=&quot;[styleObj1, styleObj2]&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;\n    &lt;/template&gt;\n    &lt;script&gt;\n    const App = &#123;\n        template: &#39;#my-app&#39;,\n        data() &#123;\n            return &#123;\n                message: &quot;GG Bone!&quot;,\n                size: 50,\n                styleObj1: &#123;\n                    color: &#39;red&#39;,\n                    fontSize: &#39;50px&#39;,\n                    &#39;background-color&#39;: &#39;pink&#39;\n                &#125;,\n                styleObj2: &#123;\n                    textDecoration: &#39;underline&#39;,\n                    fontWeight: 800\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    Vue.createApp(App).mount(&#39;#app&#39;)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;7.3.6.4 v-bind 绑定一个对象如果你想要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 v-bind (取代 v-bind:prop-name)。例如，对于一个给定的对象 post：\njspost: &#123;\n  id: 1,\n  title: &#39;My Journey with Vue&#39;\n&#125;下面的模板：\njs&lt;blog-post v-bind=&quot;post&quot;&gt;&lt;/blog-post&gt;等价于：\njs&lt;blog-post\n  v-bind:id=&quot;post.id&quot;\n  v-bind:title=&quot;post.title&quot;\n&gt;&lt;/blog-post&gt;7.3.6.5 v-bind 动态绑定","slug":"细读Vue文档","date":"2024-02-07T15:16:42.000Z","categories_index":"文档","tags_index":"VUE","author_index":"一小池勺"},{"id":"a20f42ee8373946d2898ea566c51817c","title":"821.字符串的最短距离-力扣（LeetCode）","content":"题目详情简单\n给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。返回一个整数数组 answer ，其中 answer.length &#x3D;&#x3D; s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。\n示例\n示例 1：\n\n输入：\nbashs = &quot;loveleetcode&quot;, c = &quot;e&quot;输出：\nbash[3,2,1,0,1,0,0,1,2,2,1,0]解释：\n字符 ‘e’ 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。\n距下标 0 最近的 ‘e’ 出现在下标 3 ，所以距离为 abs(0 - 3) &#x3D; 3 。\n距下标 1 最近的 ‘e’ 出现在下标 3 ，所以距离为 abs(1 - 3) &#x3D; 2 。\n对于下标 4 ，出现在下标 3 和下标 5 处的 ‘e’ 都离它最近，但距离是一样的 abs(4 - 3) &#x3D;&#x3D; abs(4 - 5) &#x3D; 1 。\n距下标 8 最近的 ‘e’ 出现在下标 6 ，所以距离为 abs(8 - 6) &#x3D; 2 。\n\n示例 2：\n\n输入：\nbashs = &quot;aaab&quot;, c = &quot;b&quot;输出：\nbash[3,2,1,0]提示\n1 &lt;&#x3D; s.length &lt;&#x3D; 104\ns[i] 和 c 均为小写英文字母\n题目数据保证 c 在 s 中至少出现一次\n\n题解javascript/**\n  @ 一小池勺 \n * @param &#123;string&#125; s\n * @param &#123;character&#125; c\n * @return &#123;number[]&#125;\n  @ 2024 1 30\n */\nvar shortestToChar = function(S, C) &#123;\n  const resultArray = new Array(S.length).fill(0)\n  let NowTargetCharC_Index = 0\n\n  // 一次遍历\n  const charArray = Array.from(S) // 将字符串转换为数组\n  charArray.forEach((item, index) =&gt; &#123;\n    if(item === C) &#123;\n      resultArray[index] = 0\n      NowTargetCharC_Index = index\n    &#125; else &#123;\n      // 针对当前的 i 元素 =&gt; 进行前后距离比较\n      resultArray[index] = Math.min(Math.abs(S.indexOf(C, index) - index), Math.abs(S.indexOf(C, NowTargetCharC_Index) - index))\n    &#125;\n  &#125;)\n\n  return resultArray\n&#125;代码思路\n创建一个与字符串长度相同的数组resultArray，并将其填充为0。\n\n初始化变量NowTargetCharC_Index为0，用于记录当前目标字符C的索引位置。\n\n将字符串转换为字符数组charArray。\n\n使用forEach方法遍历charArray中的每个字符。\n\n如果当前字符等于目标字符C，将resultArray相应索引位置的值设置为0，并更新NowTargetCharC_Index为当前索引。\n\n如果当前字符不等于目标字符C，通过indexOf方法分别计算当前索引位置到目标字符C的前一个索引位置和后一个索引位置的距离，并将较小的距离赋值给resultArray相应索引位置。\n\n返回resultArray作为结果。\n\n\n","slug":"821-字符串的最短距离-力扣（LeetCode）","date":"2024-02-07T09:59:44.000Z","categories_index":"LeetCode","tags_index":"LeetCode 解题报告","author_index":"一小池勺"}]